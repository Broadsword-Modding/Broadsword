#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Willie_BP

#include "Basic.hpp"

#include "HideBodyPart_Enum_structs.hpp"
#include "VertexPaintDetectionPlugin_structs.hpp"
#include "Severable_BodyParts_Enum_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Weapon_Slots_Enum_structs.hpp"
#include "ArmorSlots_Enum_structs.hpp"
#include "FootStepping_Enum_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BodyPart_Enum_structs.hpp"
#include "Willie_Bones_Enum_structs.hpp"
#include "GripType_Enum_structs.hpp"
#include "SheathType_Enum_structs.hpp"
#include "Attached_Transform_Str_structs.hpp"
#include "Enum_DismembermentPart_structs.hpp"
#include "Str_Loadout_Equipment_structs.hpp"
#include "Enum_VoiceType_structs.hpp"
#include "Enum_SheathSlot_Concrete_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "SheathSlots_Enum_structs.hpp"
#include "LeftRight_Enum_structs.hpp"
#include "Enum_Tiers_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Willie_BP.Willie_BP_C
// 0x33B0 (0x3A20 - 0x0670)
#pragma pack(push, 0x1)
class alignas(0x10) AWillie_BP_C : public ACharacter
{
public:
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0670(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box1;                                              // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation1;                                // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_10;                               // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_9;                                // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_8;                                // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_7;                                // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_6;                                // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_5;                                // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_4;                                // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_3;                                // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_2;                                // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_L_1;                                // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_20;                               // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_19;                               // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_18;                               // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_17;                               // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_16;                               // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_15;                               // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_14;                               // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_13;                               // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_12;                               // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_11;                               // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_10;                               // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_8;                                // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_9;                                // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_7;                                // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_6;                                // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_5;                                // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_4;                                // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_3;                                // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_2;                                // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_L_1;                                // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_16;                              // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_15;                              // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_14;                              // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_13;                              // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_12;                              // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_11;                              // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_10;                              // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_9;                               // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_8;                               // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_7;                               // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_6;                               // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_5;                               // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_4;                               // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_3;                               // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_2;                               // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_L_1;                               // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_10;                               // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_9;                                // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_8;                                // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_7;                                // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_6;                                // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_5;                                // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_4;                                // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_3;                                // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_2;                                // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Foot_R_1;                                // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_20;                               // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_19;                               // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_18;                               // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_17;                               // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_16;                               // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_15;                               // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_14;                               // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_13;                               // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_12;                               // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_11;                               // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_10;                               // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_9;                                // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_8;                                // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_7;                                // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_6;                                // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_5;                                // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_4;                                // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_3;                                // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_2;                                // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Calf_R_1;                                // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_16;                              // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_15;                              // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_14;                              // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_13;                              // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_12;                              // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_11;                              // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_10;                              // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_9;                               // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_8;                               // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_7;                               // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_6;                               // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_5;                               // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_4;                               // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_3;                               // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_2;                               // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Thigh_R_1;                               // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_10;                                 // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_9;                                  // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_8;                                  // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_7;                                  // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_6;                                  // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_5;                                  // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_4;                                  // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_3;                                  // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_2;                                  // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Head_1;                                  // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_02_6;                               // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_02_5;                               // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_02_4;                               // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_02_3;                               // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_02_2;                               // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_02_1;                               // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_01_6;                               // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_01_5;                               // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_01_4;                               // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_01_3;                               // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_01_2;                               // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Neck_01_1;                               // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_17;                             // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_16;                             // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Hand_L_1;                                // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_25;                          // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_24;                          // 0x0A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_23;                          // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_22;                          // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_21;                          // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_20;                          // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_19;                          // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_18;                          // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_17;                          // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_16;                          // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_15;                          // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_14;                          // 0x0A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Loweararm_L_13;                          // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_12;                           // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_11;                           // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_10;                           // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_9;                            // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_8;                            // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_7;                            // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_6;                            // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_5;                            // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_4;                            // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_3;                            // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_2;                            // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_L_1;                            // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Clavicle_L_5;                            // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Clavicle_L_4;                            // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Clavicle_L_1;                            // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Clavicle_R_3;                            // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Clavicle_R_2;                            // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Hand_R_1;                                // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_25;                           // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_23;                           // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_24;                           // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_23;                           // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_22;                           // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_21;                           // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_20;                           // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Clavicle_R_1;                            // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_18;                           // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_17;                           // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_16;                           // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_15;                           // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_14;                           // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Lowerarm_R_13;                           // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_12;                           // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_11;                           // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_10;                           // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_9;                            // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_8;                            // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_7;                            // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_6;                            // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_5;                            // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_4;                            // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_3;                            // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_2;                            // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Upperarm_R_1;                            // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Disentegrate_Point;                                // 0x0BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_15;                             // 0x0C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_14;                             // 0x0C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_13;                             // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_12;                             // 0x0C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_11;                             // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_10;                             // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_9;                              // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_8;                              // 0x0C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_7;                              // 0x0C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_6;                              // 0x0C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_5;                              // 0x0C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_4;                              // 0x0C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_3;                              // 0x0C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_2;                              // 0x0C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_1;                              // 0x0C70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_05_0;                              // 0x0C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_7;                              // 0x0C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_6;                              // 0x0C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_5;                              // 0x0C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_4;                              // 0x0C98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_3;                              // 0x0CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_2;                              // 0x0CA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_1;                              // 0x0CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_04_0;                              // 0x0CB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_7;                              // 0x0CC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_6;                              // 0x0CC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_5;                              // 0x0CD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_4;                              // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_3;                              // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_3;                              // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_2;                              // 0x0CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_1;                              // 0x0CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_03_0;                              // 0x0D00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_7;                              // 0x0D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_6;                              // 0x0D10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_5;                              // 0x0D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_4;                              // 0x0D20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_2;                              // 0x0D28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_1;                              // 0x0D30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Spine_02_0;                              // 0x0D38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_9;                                // 0x0D40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_8;                                // 0x0D48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_7;                                // 0x0D50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_6;                                // 0x0D58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_5;                                // 0x0D60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_4;                                // 0x0D68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_3;                                // 0x0D70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_2;                                // 0x0D78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis_1;                                // 0x0D80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DM_Sphere_Pelvis;                                  // 0x0D88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RuntimeVertexPaintAndDetectionComponent_C* BPC_RuntimeVertexPaintAndDetectionComponent; // 0x0D90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        heavy_exertion_Cue;                                // 0x0D98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Arm_Sphere_Shoulder_R;                 // 0x0DA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Sphere_Armpit_R_0;                     // 0x0DA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Sphere_Armpit_R_1;                     // 0x0DB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BoneCore;                                          // 0x0DB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_LegL_dri;                // 0x0DC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_Pelvis_dri;              // 0x0DC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_ArmL_dri;                // 0x0DD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_ArmR_dri;                // 0x0DD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_LegR_dri;                // 0x0DE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_Spine04_dri;             // 0x0DE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_Spine03_dri;             // 0x0DF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CollisionCapsule_Sheathed_Spine05_dri;             // 0x0DF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Sphere_Armpit_L_1;                     // 0x0E00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Sphere_Armpit_L_0;                     // 0x0E08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Arm_Sphere_Shoulder_L;                 // 0x0E10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Arm_Sphere_Back_Up;                    // 0x0E18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Check_Stuck_Arm_Sphere_Back_Lo;                    // 0x0E20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 DriverSkeleton;                                    // 0x0E28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PhotoMode_C*                       BPC_PhotoMode;                                     // 0x0E30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor;                                        // 0x0E38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FollowCamera1;                                     // 0x0E40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GrabPoint_L;                                       // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GrabPoint_R;                                       // 0x0E50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Skeleton;                                       // 0x0E58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collison_Foot_L;                                   // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collison_Foot_R;                                   // 0x0E68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IK_L_Hand;                                         // 0x0E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IK_L_Elbow;                                        // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IK_L_Shoulder;                                     // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Shoulder_L_To_Elbow_Scene;                         // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IK_R_Hand;                                         // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IK_R_Elbow;                                        // 0x0E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IK_R_Shoulder;                                     // 0x0EA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Shoulder_R_To_Elbow_Scene;                         // 0x0EA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        R_IK_Elbow_Scene;                                  // 0x0EB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        L_IK_Elbow_Scene;                                  // 0x0EB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OffHandPosition_Twohanded;                         // 0x0EC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OffHand_Tune;                                      // 0x0EC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle_GetUp;                               // 0x0ED0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle_LowerBody;                           // 0x0ED8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle_UpperBody;                           // 0x0EE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Lock_On_Detector;                                  // 0x0EE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Threat_Detector;                                   // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                ForceFeedback;                                     // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandleR;                                    // 0x0F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandleL;                                    // 0x0F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Gut;                                               // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Throat_Audio;                                      // 0x0F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Voice_Audio;                                       // 0x0F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Voice_Scene;                                       // 0x0F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoomFP;                                      // 0x0F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Camera_Scene_FP;                                   // 0x0F38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FollowCamera;                                      // 0x0F40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom_Shoulder_;                              // 0x0F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        L_Hand_Ik_Tune_Scene;                              // 0x0F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Effector_Arm_L;                                    // 0x0F58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Shoulder_L_IK_Scene;                               // 0x0F60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint_Z;                               // 0x0F68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       StepSplineL;                                       // 0x0F70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       StepSplineR;                                       // 0x0F78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Wound_Location;                                    // 0x0F80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint_Main;                            // 0x0F88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Head_Rot_Scene;                                    // 0x0F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Shoulders_Rot_Scene;                               // 0x0F98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        R_Foot_IK;                                         // 0x0FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        L_Foot_IK;                                         // 0x0FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Ass_Scene_Z;                                       // 0x0FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        R_Knee_IK;                                         // 0x0FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        L_Knee_IK;                                         // 0x0FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Ass_Scene_1;                                       // 0x0FC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Ass_Scene;                                         // 0x0FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        L_Foot_IK_Rotated;                                 // 0x0FD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        R_Foot_IK_Rotated;                                 // 0x0FE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        R_Hand_Ik_Tune_Scene;                              // 0x0FE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom_Center_;                                // 0x0FF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Camera_Scene;                                      // 0x0FF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x1000(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Effector_Arm_R;                                    // 0x1008(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Shoulder_R_IK_Scene;                               // 0x1010(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       First_Person_Camera;                               // 0x1018(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_8__Direction_7485C23547C60D079774AB9DF532A70E; // 0x1020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1021[0x7];                                     // 0x1021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_8;                                        // 0x1028(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_7__Direction_34EA67334EE05B459126BB817346474D; // 0x1030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1031[0x7];                                     // 0x1031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_7;                                        // 0x1038(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_Step_Progress_AABC9336483F3F1EBAD7B79727C93F97; // 0x1040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_6__Direction_AABC9336483F3F1EBAD7B79727C93F97; // 0x1044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1045[0x3];                                     // 0x1045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x1048(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_Step_Progress_34205C1C425BFFA28B5F7D91DF39A84E; // 0x1050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_34205C1C425BFFA28B5F7D91DF39A84E; // 0x1054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1055[0x3];                                     // 0x1055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x1058(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Fallen_Give_Up_TL__Direction_2228E3CE4D44FEF3A5703AA46CED46B1; // 0x1060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1061[0x7];                                     // 0x1061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Fallen_Give_Up_TL;                                 // 0x1068(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Kick_R_Timeline_NewTrack_0_F84060AA439F72BB32955484C01B4CCB; // 0x1070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Kick_R_Timeline__Direction_F84060AA439F72BB32955484C01B4CCB; // 0x1074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1075[0x3];                                     // 0x1075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Kick_R_Timeline;                                   // 0x1078(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Kick_L_Timeline_NewTrack_0_10DDEAB84D0DB13C16D578A5D5B3A7AA; // 0x1080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Kick_L_Timeline__Direction_10DDEAB84D0DB13C16D578A5D5B3A7AA; // 0x1084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1085[0x3];                                     // 0x1085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Kick_L_Timeline;                                   // 0x1088(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_E22895D047DE6563EC0F6BA212E79F56; // 0x1090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1091[0x7];                                     // 0x1091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x1098(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Wake_Up_F85E27254B0CF6B4591A489E276C2487; // 0x10A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_F85E27254B0CF6B4591A489E276C2487; // 0x10A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A5[0x3];                                     // 0x10A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x10A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_Shake_Timeline_Shake_Cam_Z_AF53845A476CA1C87BEEBCB2EE885889; // 0x10B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_Shake_Timeline_Shake_Cam_Y_AF53845A476CA1C87BEEBCB2EE885889; // 0x10B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_Shake_Timeline_Shake_Cam_X_AF53845A476CA1C87BEEBCB2EE885889; // 0x10B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Camera_Shake_Timeline__Direction_AF53845A476CA1C87BEEBCB2EE885889; // 0x10BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10BD[0x3];                                     // 0x10BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Camera_Shake_Timeline;                             // 0x10C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_Step_Progress_E86A26BC4439C443728F7183D408230D; // 0x10C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_E86A26BC4439C443728F7183D408230D; // 0x10CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10CD[0x3];                                     // 0x10CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x10D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_89B56D0C45B5FC462868688C529B1E4F; // 0x10D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D9[0x7];                                     // 0x10D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x10E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_E5E389E347DEBDBF6258D3B1F9BFCF5F; // 0x10E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E9[0x7];                                     // 0x10E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x10F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Slomo_Timeline_Time_Dilation_D46B620B476457D87537CDB1216D0F9D; // 0x10F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Slomo_Timeline__Direction_D46B620B476457D87537CDB1216D0F9D; // 0x10FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10FD[0x3];                                     // 0x10FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Slomo_Timeline;                                    // 0x1100(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         L_Step_Timeline_Step_Progress_1B74948A437E30E8E71B8BBC9D8A9F6B; // 0x1108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            L_Step_Timeline__Direction_1B74948A437E30E8E71B8BBC9D8A9F6B; // 0x110C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_110D[0x3];                                     // 0x110D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     L_Step_Timeline;                                   // 0x1110(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         R_Step_Timeline_Step_Progress_A35F354C423026A1610E4E9E05E1309F; // 0x1118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            R_Step_Timeline__Direction_A35F354C423026A1610E4E9E05E1309F; // 0x111C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111D[0x3];                                     // 0x111D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     R_Step_Timeline;                                   // 0x1120(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Death_Timeline_NewTrack_0_75E28255457A18F7A2D1C7A5CC02480F; // 0x1128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Death_Timeline__Direction_75E28255457A18F7A2D1C7A5CC02480F; // 0x112C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112D[0x3];                                     // 0x112D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Death_Timeline;                                    // 0x1130(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        X;                                                 // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x1140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Control_Rotation_Y;                                // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Guarding;                                        // 0x1150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1151[0x7];                                     // 0x1151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Axis_Value_X;                                      // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Axis_Value_Y;                                      // 0x1160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Guarding;                                        // 0x1168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1169[0x7];                                     // 0x1169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Look_Sensiticity;                                  // 0x1170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Vector;                                        // 0x1178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Vector_Delayed;                                // 0x1190(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Velocity;                                      // 0x11A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lean_Forward_On_Attack_Rate;                       // 0x11C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Aim_Swing_Speed;                                   // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               R_Aim_Rotation;                                    // 0x11D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Shoulders_Swing;                                   // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Rigid_Bones;                                       // 0x11F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRotator                               R_Swing_Direction;                                 // 0x1200(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Body_Rotation;                                     // 0x1218(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        R_Wrist_Direction;                                 // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Ass_Rotation_Z;                                    // 0x1238(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Movement_Dislocation;                              // 0x1250(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R_Foot_Default_Dislocation;                        // 0x1268(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Foot_Default_Dislocation;                        // 0x1280(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Feet_Expected_Position;                            // 0x1298(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Health;                                            // 0x12B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DED;                                               // 0x12B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fallen;                                            // 0x12B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12BA[0x6];                                     // 0x12BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        All_Body_Tonus;                                    // 0x12C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Upper_Torso_Bones;                                 // 0x12C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Lower_Torso_Bones;                                 // 0x12D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           R_Arm_Bones;                                       // 0x12E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           L_Leg_Bones;                                       // 0x12F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           R_Leg_Bones;                                       // 0x1308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Neck_Bones;                                        // 0x1318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           L_Arm_Bones;                                       // 0x1328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Head_Bones;                                        // 0x1338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Capsule_Dislocation;                               // 0x1348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Foot_Touch_Ground;                               // 0x1360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Foot_Touch_Ground;                               // 0x1361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1362[0x6];                                     // 0x1362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Shoulders_Dislocation;                             // 0x1368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Constraint_Rate;                                   // 0x1380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                R_GripType_Current;                                // 0x1388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1389[0x7];                                     // 0x1389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            PhysicsConstraint_R_Hand;                          // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        R_Arm_Control_IK_Rate;                             // 0x1398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Look_Rotation__Read_Only_;                         // 0x13A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Capsule_Max_Dislocation;                           // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_To_Ground_Right;                          // 0x13C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_To_Ground_Left;                           // 0x13C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Walk_Speed_Rate_Run;                               // 0x13C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Walk_Speed_Rate_Aim;                               // 0x13CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foot_Twist_R;                                      // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foot_Twist_L;                                      // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Upper_Body_Tonus;                                  // 0x13E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_R_Tonus;                                       // 0x13E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_L_Tonus;                                       // 0x13F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leg_R_Tonus;                                       // 0x13F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leg_L_Tonus;                                       // 0x1400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Body_Hit_Force;                                    // 0x1408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lower_Tilt_Right;                                  // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lower_Tilt_Front;                                  // 0x1418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lower_Tilt_Upright;                                // 0x1420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Upper_Tilt_Right;                                  // 0x1428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Upper_Tilt_Front;                                  // 0x1430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Upper_Tilt_Upright;                                // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pos_Constraint;                                    // 0x1440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rot_Constraint;                                    // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Orientation_Strength;                              // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angular_Strength;                                  // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Muscle_Power;                                      // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_L_Arm_Alpha;                                  // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_R_Arm_Alpha;                                  // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain;                                              // 0x1478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Elbow_R_pain;                                      // 0x1480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Elbow_L_pain;                                      // 0x1498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Stepping;                                        // 0x14B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Stepping;                                        // 0x14B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B2[0x6];                                     // 0x14B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                R_Step_Start_Position;                             // 0x14B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R_Step_End_Position;                               // 0x14D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Step_Start_Position;                             // 0x14E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Step_End_Position;                               // 0x1500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFootStepping_Enum                            Foot_Stepping_Enum;                                // 0x1518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1519[0x3];                                     // 0x1519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Step_Rate;                                         // 0x151C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Root_Height;                                       // 0x1520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate_Constraint;                               // 0x1528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Crouched;                                       // 0x1529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152A[0x6];                                     // 0x152A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Crouched_Height;                                   // 0x1530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R_Foot_On_Ground_Loc;                              // 0x1538(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Foot_On_Ground_Loc;                              // 0x1550(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Right_Foot_Lead;                                   // 0x1568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1569[0x7];                                     // 0x1569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pelvis_Dislocaton;                                 // 0x1570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ass_Rotation;                                      // 0x1588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Consciousness;                                     // 0x1590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Head_Health;                                       // 0x1598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Body_Upper_Health;                                 // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Body_Lower_Health;                                 // 0x15A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_R_Health;                                      // 0x15B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_L_Health;                                      // 0x15B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leg_R_Health;                                      // 0x15C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leg_L_Health;                                      // 0x15C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LR_Feet_Height_Difference;                         // 0x15D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RL_Feet_Height_Difference;                         // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Walk_Arm_L;                                        // 0x15E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AI_Control_Rotation;                               // 0x15F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        R_Y;                                               // 0x1610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_X;                                               // 0x1618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Arm_Control_IK_Rate;                             // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_X;                                               // 0x1628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Y;                                               // 0x1630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_Aim_Rotation;                                    // 0x1638(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Default_Arm_Position_R;                            // 0x1650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Default_Arm_Position_L;                            // 0x1668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_Swing_Direction;                                 // 0x1680(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        L_Wrist_Direction;                                 // 0x1698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                L_GripType_Current;                                // 0x16A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Any_Guarding;                                      // 0x16A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A2[0x6];                                     // 0x16A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            PhysicsConstraint_L_Hand;                          // 0x16A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESeverable_BodyParts_Enum                     Dismember_Body_Part;                               // 0x16B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16B1[0x7];                                     // 0x16B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Bleeding;                                          // 0x16B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_R;                                          // 0x16C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C8[0x8];                                     // 0x16C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Default_Transform;                                 // 0x16D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Thrusting;                                       // 0x1730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Thrusting_Extend;                                // 0x1731(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Down;                                            // 0x1732(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1733[0x5];                                     // 0x1733(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        R_Thrust_Alpha;                                    // 0x1738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Thrust_Position_Alpha;                           // 0x1740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Blood_Sp_Rate;                               // 0x1748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBodyPart_Enum                                Spawn_Blood_Body_Part;                             // 0x1750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1751[0x3];                                     // 0x1751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Look_Z;                                            // 0x1754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_L;                                          // 0x1758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicalAnimationComponent*>    Phys_Anim_Array;                                   // 0x1760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          First_Person;                                      // 0x1770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shout_Recharge;                                    // 0x1771(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Thrusting_End;                                   // 0x1772(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1773[0x1];                                     // 0x1773(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Times_Pressed_R;                                   // 0x1774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Swing_Velocity_proxy;                              // 0x1778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Proxy_Model_Index_Set;                             // 0x1780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1781[0x3];                                     // 0x1781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Proxy_Model_Index;                                 // 0x1784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EArmorSlots_Enum, class UClass*>         ArmorSlots_1;                                      // 0x1788(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkeletalMeshComponent*                 Proxy_Skeleton;                                    // 0x17D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Spawned_Blood_Rate;                           // 0x17E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABlood_BP_PT_C*>                 Spawned_Blood;                                     // 0x17E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   Spawn_Bone;                                        // 0x17F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Spawned_Limb;                                      // 0x1800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               Proc_Mesh_Component_1;                             // 0x1808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EWillie_Bones_Enum                            Dismembered_Bone;                                  // 0x1810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1811[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProceduralMeshComponent*               Proc_Mesh_Component_2;                             // 0x1818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               Proc_Mesh_Component_3;                             // 0x1820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UPrimitiveComponent*> Spawned_Gore;                                      // 0x1828(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                Spawned_Limb_Location;                             // 0x1878(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Spawned_Limb_Rotation;                             // 0x1890(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMap<class FName, bool>                       Dismembered_Map;                                   // 0x18A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Dismembered_Array;                                 // 0x18F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   Dismember_Bone_Selection;                          // 0x1908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dismemberment_Avaliable;                           // 0x1910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1911[0x7];                                     // 0x1911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Root_Angular_Constraint_Power;                     // 0x1918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Root_Linear_Constraint_Power;                      // 0x1920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GetUp_Arm_R;                                       // 0x1928(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GetUp_Arm_L;                                       // 0x1940(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GetUp_Leg_R;                                       // 0x1958(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GetUp_Leg_L;                                       // 0x1970(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fallen_Rate;                                       // 0x1988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBodyPart_Enum, bool>                    Dismember_Body_Part_Map;                           // 0x1990(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UDecalComponent*, struct FAttached_Transform_Str> Attached_Decal_Map;                 // 0x19E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class AActor*, struct FAttached_Transform_Str> Attached_Blood_Emitters;                     // 0x1A30(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           Lock_From_Dismember_Temp;                          // 0x1A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Mute;                                              // 0x1A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A91[0x7];                                     // 0x1A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Neck_Health;                                       // 0x1A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UStaticMesh*>         Spawned_Gore_On_Limb;                              // 0x1AA0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkeletalMeshComponent*                 Guts;                                              // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Block_Dismember_Bone;                              // 0x1AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Stick_X;                                           // 0x1B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Y;                                           // 0x1B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team_Int;                                          // 0x1B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          L_Down;                                            // 0x1B1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1D[0x3];                                     // 0x1B1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Times_Pressed_L;                                   // 0x1B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Thrusting;                                       // 0x1B24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Thrusting_Extend;                                // 0x1B25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Thrusting_End;                                   // 0x1B26(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B27[0x1];                                     // 0x1B27(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        L_Thrust_Alpha;                                    // 0x1B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Thrust_Position_Alpha;                           // 0x1B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_Settings_C*                         GI_Settings;                                       // 0x1B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Offhand_Searching_Grip;                          // 0x1B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B41[0x7];                                     // 0x1B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_HalfSwordGameMode_C*                HS_Game_Mode;                                      // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_In_Offhand_Attached;                        // 0x1B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Alt_Thrusting;                                     // 0x1B51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B52[0x6];                                     // 0x1B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TG_R;                                              // 0x1B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TG_L;                                              // 0x1B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alt_Thrust_R;                                      // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alt_Thrust_L;                                      // 0x1B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alt_Thrusting_Alpha;                               // 0x1B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Downed;                                            // 0x1B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Left_Hand_Not_Found;                               // 0x1B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dropping_R;                                        // 0x1B82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player_Getting_Up_Pressed;                         // 0x1B83(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thrust_Alt_Gamepad;                                // 0x1B84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Gurgling;                                          // 0x1B85(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Screaming;                                         // 0x1B86(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B87[0x1];                                     // 0x1B87(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Last_Pain;                                         // 0x1B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Body_Material;                                     // 0x1B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Threat_Location_R;                                 // 0x1B98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Threat_Location_L;                                 // 0x1BB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Parrying_R;                                        // 0x1BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Parrying_L;                                        // 0x1BC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BCA[0x6];                                     // 0x1BCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        R_Parry_Rate;                                      // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Parry_Rate;                                      // 0x1BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Danger_;                                           // 0x1BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Offhand;                                    // 0x1BE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Offhand;                                    // 0x1BE2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BE3[0x5];                                     // 0x1BE3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        R_Offhand_Rate;                                    // 0x1BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Offhand_Rate;                                    // 0x1BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Threatening_Stance;                                // 0x1BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BF9[0x7];                                     // 0x1BF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Running_Speed_Rate;                                // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Movement_Input_Vector;                             // 0x1C08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Weapon_Length_Default;                           // 0x1C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Weapon_Length_To_Top;                            // 0x1C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Immediate_Threat;                               // 0x1C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C31[0x7];                                     // 0x1C31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               R_Phys_Hand_Rel_Rot_AI;                            // 0x1C38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               L_Phys_Hand_Rel_Rot_AI;                            // 0x1C50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         Targeted_By_AI;                                    // 0x1C68(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Lock_Camera_At;                                    // 0x1C78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lock_On_Found;                                     // 0x1C90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C91[0x7];                                     // 0x1C91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       Active_Camera;                                     // 0x1C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Aim_Lock_On;                                       // 0x1CA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Aim_Lock_Off;                                      // 0x1CB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         R_Step_Progress;                                   // 0x1CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Step_Progress;                                   // 0x1CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Walk_Shoulder_Swing;                               // 0x1CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Walk_Arm_R;                                        // 0x1CD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ground_Unevenness;                                 // 0x1CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Foot_Dislocation_X;                              // 0x1CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Foot_Dislocation_X;                              // 0x1CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         Worn_Armor;                                        // 0x1D00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Switching_Feet_R;                                  // 0x1D10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Switching_Feet_L;                                  // 0x1D11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D12[0x6];                                     // 0x1D12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        R_Arm_Extra_Tonus;                                 // 0x1D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Arm_Extra_Tonus;                                 // 0x1D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pain_Shock;                                        // 0x1D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                R_GripType_Default;                                // 0x1D29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Alt_Grip;                                        // 0x1D2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Two_Handed_Grip;                                 // 0x1D2B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2C[0x4];                                     // 0x1D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               R_Thrust_Rot_Comb;                                 // 0x1D30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               R_Shoulder_Rotation;                               // 0x1D48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               R_Elbow_Rotation;                                  // 0x1D60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               R_Hand_Rotation;                                   // 0x1D78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               R_Elbow_Additive_Rotation;                         // 0x1D90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               R_Shoulder_Additive_Rotation;                      // 0x1DA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                R_Out_Joint_Pos;                                   // 0x1DC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R_Out_End_Pos;                                     // 0x1DD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Out_Joint_Pos;                                   // 0x1DF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Out_End_Pos;                                     // 0x1E08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_Shoulder_Rotation;                               // 0x1E20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               L_Elbow_Rotation;                                  // 0x1E38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               L_Hand_Rotation;                                   // 0x1E50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               L_Elbow_Additive_Rotation;                         // 0x1E68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               L_Shoulder_Additive_Rotation;                      // 0x1E80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Give_Up;                                           // 0x1E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E99[0x7];                                     // 0x1E99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        L_AI_Balance_Point__temp_;                         // 0x1EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_Shake;                                      // 0x1EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EAC[0x4];                                     // 0x1EAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Hit_Rigidity;                                      // 0x1EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Fisting_Rate;                                    // 0x1EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Fisting_Rate;                                    // 0x1EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lower_Threshold_Hit;                               // 0x1EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC9[0x7];                                     // 0x1EC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Constraint_Rate_Proxy;                             // 0x1ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        On_Ground_Z_Rotation;                              // 0x1ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         On_Ground_Turn;                                    // 0x1EE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EE4[0x4];                                     // 0x1EE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        On_Ground_Movement_Dot;                            // 0x1EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hand_R_Get_Up_Found;                               // 0x1EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hand_L_Get_Up_Found;                               // 0x1EF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leg_R_Get_Up_Found;                                // 0x1EF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leg_L_Get_Up_Found;                                // 0x1EF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Get_Up_Any_Limb_Found;                             // 0x1EF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EF5[0x3];                                     // 0x1EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               L_Thrust_Rot_Comb;                                 // 0x1EF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Invert_Value;                                      // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inverted_;                                         // 0x1F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F19[0x7];                                     // 0x1F19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pain_Stumble_Immediate;                            // 0x1F20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pain_Stumble_Delayed;                              // 0x1F38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Pain_Threshold;                            // 0x1F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Pain_Bone;                                         // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Grab_Rate;                                    // 0x1F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Camera_Locked;                                     // 0x1F68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_R_Target_Found;                               // 0x1F69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F6A[0x6];                                     // 0x1F6A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Grab_R_Rate;                                       // 0x1F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lean_Forward__Grabbing_;                           // 0x1F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Grab_Component_R;                                  // 0x1F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Grab_Bone_R;                                       // 0x1F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grabbed_R;                                         // 0x1F90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F91[0x7];                                     // 0x1F91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            Grab_R_Constraint;                                 // 0x1F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Grab_Component_L;                                  // 0x1FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Grab_L_Constraint;                                 // 0x1FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_L_Target_Found;                               // 0x1FB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FB1[0x7];                                     // 0x1FB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Grab_L_Rate;                                       // 0x1FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Grab_Bone_L;                                       // 0x1FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grabbed_L;                                         // 0x1FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Being_Grabbed;                                     // 0x1FC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FCA[0x6];                                     // 0x1FCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Armor_Morph_Targets;                               // 0x1FD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        R_Grab_Force_Limit;                                // 0x1FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Grab_Force_Limit;                                // 0x1FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Current_Control_Rotation;                          // 0x1FF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          R_Hand_Constraint_Locked;                          // 0x2008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Constraint_Locked;                          // 0x2009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                L_GripType_Default;                                // 0x200A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_200B[0x5];                                     // 0x200B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AModularWeaponBP_C*                     Weapon_R_0;                                        // 0x2010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_L_0;                                        // 0x2018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Swapping_weapons;                                  // 0x2020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Arm_Being_Grabbed;                               // 0x2021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Arm_Being_Grabbed;                               // 0x2022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2023[0x5];                                     // 0x2023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Current_Default_R_Arm_Position;                    // 0x2028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Default_L_Arm_Position;                    // 0x2040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dropping_L;                                        // 0x2058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2059[0x7];                                     // 0x2059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wrist_R_Direct_Control_Rate;                       // 0x2060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wrist_R_Direct_Control;                            // 0x2068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Grab_Pressed;                                    // 0x2069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Weapon_Sheathing;                                // 0x206A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_206B[0x5];                                     // 0x206B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               R_Wrist_Direct_Rotation;                           // 0x2070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2088[0x8];                                     // 0x2088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_Transform;                                    // 0x2090(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Scabbard_R_1;                                      // 0x20F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Slot_R_1_Constraint;                               // 0x20F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Weapon_UnSheathing_R;                              // 0x2100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2101[0x3];                                     // 0x2101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sheath_Margin_R;                                   // 0x2104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Hit_Impulse;                                  // 0x2108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Complex_Damage_Impulse;                       // 0x2110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Latest_Damage_Raw;                                 // 0x2118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Last_Complex_Damage_Bone;                          // 0x2120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABlood_BP_PT_C*                         Latest_Blood_Emitter;                              // 0x2128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Manniquin_;                                        // 0x2130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2131[0x7];                                     // 0x2131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Free_Fall_Rate;                                    // 0x2138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Helmet_World_Mesh;                                 // 0x2140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Kneel_Falling;                                   // 0x2148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Kneel_Falling;                                   // 0x2149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214A[0x6];                                     // 0x214A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Z;                                                 // 0x2150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Block_R_Weapon_From_Sheathing;                     // 0x2158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2159[0x3];                                     // 0x2159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   R_Sheath_Slot_Name;                                // 0x215C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2164[0x4];                                     // 0x2164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AModularWeaponBP_C*                     Last_Sheathed_Weapon_R;                            // 0x2168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_Slot_R_1;                                   // 0x2170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_Slot_R_2;                                   // 0x2178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Scabbard_R_2;                                      // 0x2180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_Slot_Back;                                  // 0x2188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Fear;                                              // 0x2190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Current_Scabbard_R;                                // 0x2198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Ignore_Pick_Up_Array;                              // 0x21A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	EWeapon_Slots_Enum                            Sheath_Slot_R;                                     // 0x21B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21B1[0x7];                                     // 0x21B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            Slot_R_2_Constraint;                               // 0x21B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Slot_Back_Constraint;                              // 0x21C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_Float;                                        // 0x21C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Grab_Pressed;                                    // 0x21D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Weapon_Sheathing;                                // 0x21D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21D2[0x2];                                     // 0x21D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   L_Sheath_Slot_Name;                                // 0x21D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21DC[0x4];                                     // 0x21DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            Slot_L_1_Constraint;                               // 0x21E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Slot_L_2_Constraint;                               // 0x21E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_Slot_L_1;                                   // 0x21F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Weapon_Slot_L_2;                                   // 0x21F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Scabbard_L_1;                                      // 0x2200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Scabbard_L_2;                                      // 0x2208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Current_Scabbard_L;                                // 0x2210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EWeapon_Slots_Enum                            Sheath_Slot_L;                                     // 0x2218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2219[0x7];                                     // 0x2219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AModularWeaponBP_C*                     Last_Sheathed_Weapon_L;                            // 0x2220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Sheath_Margin_L;                                   // 0x2228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wrist_L_Direct_Control;                            // 0x222C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222D[0x3];                                     // 0x222D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               L_Wrist_Direct_Rotation;                           // 0x2230(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Block_L_Weapon_From_Sheathing;                     // 0x2248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Weapon_UnSheathing_L;                              // 0x2249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224A[0x6];                                     // 0x224A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Slot_1_Weapon_Length;                              // 0x2250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slot_2_Weapon_Length;                              // 0x2258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slot_3_Weapon_Length;                              // 0x2260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slot_4_Weapon_Length;                              // 0x2268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slot_5_Weapon_Length;                              // 0x2270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_R_Found;                                      // 0x2278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_L_Found;                                      // 0x2279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invulnerable;                                      // 0x227A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_227B[0x5];                                     // 0x227B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Armor_P_Sound_Upper;                               // 0x2280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_P_Sound_Lower;                               // 0x2288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Start_Weapon_Right_Hand;                           // 0x2290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Start_Weapon_Left_Hand;                            // 0x2298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Pain_Shock_Rate;                                   // 0x22A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Shock_Interp;                                 // 0x22A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_On_Ground;                                   // 0x22B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Initial_Wake_Up_State;                             // 0x22B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Retreat;                                           // 0x22B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22B3[0x5];                                     // 0x22B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Panic_Rate;                                        // 0x22B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UMaterialInstanceDynamic*>  New_ID;                                            // 0x22C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Worn_Armor_Items;                                  // 0x2310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UClass*, class UMaterialInstanceDynamic*> Armor_Slot_Materials;                       // 0x2320(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkeletalMeshComponent*                 Upper_Body_Mesh;                                   // 0x2370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Upper_Body_Spawned;                                // 0x2378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2379[0x7];                                     // 0x2379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USceneComponent*, class FName>     Gore_Meshes;                                       // 0x2380(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class USkeletalMeshComponent*                 Currently_Dismembered_Mesh;                        // 0x23D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        Regen_Rate;                                        // 0x23D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Sustained_Damage;                                  // 0x23E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wake_Up_Rate;                                      // 0x23E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Music_Temp_;                                       // 0x23F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Grip_Alt_Toggle;                                 // 0x23F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23F9[0x7];                                     // 0x23F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Damage_Taken;                                      // 0x2400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bend_Down_On_Attack;                               // 0x2408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Guts_Spilled;                                      // 0x2410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2411[0x7];                                     // 0x2411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USG_Autosave_C*                         SaveGame;                                          // 0x2418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_Kneeled;                                     // 0x2420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2421[0x7];                                     // 0x2421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Mouse_Sensitivity_Rate;                            // 0x2428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Armor_Collision_Meshes;                            // 0x2430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Head_Health__Crush_;                               // 0x2440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Being_Destroyed;                                   // 0x2448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2449[0x7];                                     // 0x2449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Right_Foot_Sound;                                  // 0x2450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Left_Foot_Sound;                                   // 0x2458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_R_1_StartUp;                           // 0x2460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_R_2_StartUp;                           // 0x2468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_Back_StartUp;                          // 0x2470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_L_1_StartUp;                           // 0x2478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_L_2_StartUp;                           // 0x2480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Damage_Rate__Additional_;                          // 0x2488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Limb_Damage_Rate__Additional_;                     // 0x2490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Health_Threshold_For_Dismemberment;                // 0x2498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          NPC_Dualist;                                       // 0x24A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fearless;                                          // 0x24A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_24A2[0x6];                                     // 0x24A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EArmorSlots_Enum, class UClass*>         ArmorSlots_Premade;                                // 0x24A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Level;                                             // 0x24F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24FC[0x4];                                     // 0x24FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Woke_Up;                                           // 0x2500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Dead;                                              // 0x2510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Weapon_Between_Legs;                               // 0x2520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blood_Bleed_Ok;                                    // 0x2521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blood_Splash_Ok;                                   // 0x2522(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Block_Drop;                                 // 0x2523(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Block_Drop;                                 // 0x2524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Using_Photo_Mode;                               // 0x2525(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2526[0x2];                                     // 0x2526(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BloodyFoot_R;                                      // 0x2528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BloodyFoot_L;                                      // 0x252C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloodyFeetAlpha;                                   // 0x2530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloodyFeetNoise;                                   // 0x2538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number_of_Active_Blood_Streams;                    // 0x2540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Maximum_Active_Blood_Streams;                      // 0x2544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastPosition;                                      // 0x2548(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Linear_Force;                                  // 0x2560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Angular_Force;                                 // 0x2564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Swing_Direction;                                   // 0x2568(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Upper_Body_Lock_On_Rot_Z;                          // 0x2580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2584[0x4];                                     // 0x2584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                R_Foot_Rel_Location;                               // 0x2588(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Foot_Rel_Location;                               // 0x25A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foot_Turn_R;                                       // 0x25B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foot_Turn_L;                                       // 0x25C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Toggle;                                     // 0x25C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C9[0x7];                                     // 0x25C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Aim_Vector_0;                                      // 0x25D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Head_Lock_Rotation;                                // 0x25E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Head_Tonus;                                        // 0x2600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Toggle;                                     // 0x2608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2609[0x7];                                     // 0x2609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Hit_Component;                                     // 0x2610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other_Actor;                                       // 0x2618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Other_Comp;                                        // 0x2620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Body_Hit_Normal_Impulse;                           // 0x2628(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Body_Hit;                                          // 0x2640(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Body_Hit_Impact_Point;                             // 0x2738(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Body_Hit_Normal;                                   // 0x2750(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Body_Hit_Bone_Name_Self;                           // 0x2768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Body_Hit_Bone_Name;                                // 0x2770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Root_Height_Low_HP;                                // 0x2778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Velocity_0;                                    // 0x2780(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PainFlinchDirection_Current;                       // 0x2798(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               PainFlinchDirection_Latest;                        // 0x27B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Flinch_Index;                                      // 0x27C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27CC[0x4];                                     // 0x27CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Pain_Lower_Body;                                   // 0x27D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Upper_Body;                                   // 0x27D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Neck;                                         // 0x27E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Head;                                         // 0x27E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Arm_R;                                        // 0x27F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Arm_L;                                        // 0x27F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Leg_R;                                        // 0x2800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pain_Leg_L;                                        // 0x2808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Pain_Wound_Direction;                              // 0x2810(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBodyPart_Enum                                Current_Pain_Body_Part;                            // 0x2828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBodyPart_Enum                                Current_Pain_Grab;                                 // 0x2829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282A[0x6];                                     // 0x282A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Dodge_Vector;                                      // 0x2830(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dodging;                                           // 0x2848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2849[0x7];                                     // 0x2849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dodge_Rate;                                        // 0x2850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dodge_Vector_Local;                                // 0x2858(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Kneel;                                           // 0x2870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Kneel;                                           // 0x2871(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Foot_Just_Started;                               // 0x2872(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Foot_Just_Started;                               // 0x2873(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Pelvis_Mass;                               // 0x2874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Spine_05_Mass;                             // 0x2878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_287C[0x4];                                     // 0x287C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Head_Rotation_Lerp;                                // 0x2880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Exhaustion;                                        // 0x2888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Skill__Temp_;                                      // 0x2890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Left_Arm_Dominates;                                // 0x2898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2899[0x7];                                     // 0x2899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Grab_Location_Right;                               // 0x28A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Grab_Location_Left;                                // 0x28B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AI_Invincibility_Rate;                             // 0x28D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          R_Hand_Stuck;                                      // 0x28D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Stuck;                                      // 0x28D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28DA[0x6];                                     // 0x28DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Last_Hit_Body_Component;                           // 0x28E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Slide_Body_Against_Body;                           // 0x28E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28E9[0x7];                                     // 0x28E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lawnmower_Rate;                                    // 0x28F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stuck_Meter_R_Hand;                                // 0x28F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stuck_Meter_L_Hand;                                // 0x2900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Debug_Global_Time;                                 // 0x2908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Stuck_Under_L_Armpit;                       // 0x2910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sheath_Stuck_Between_Legs;                         // 0x2911(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Stuck_Shoulder;                             // 0x2912(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2913[0x5];                                     // 0x2913(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, double>                     Armor_Bones_Weights_Floats;                        // 0x2918(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class USphereComponent*>    Armor_Bones_Weights_Colliders;                     // 0x2968(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Armor_Weight_Head;                                 // 0x29B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_Weight_Body;                                 // 0x29C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_Weight_Arm_R;                                // 0x29C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_Weight_Arm_L;                                // 0x29D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_Weight_Legs;                                 // 0x29D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina;                                           // 0x29E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_Burn;                                      // 0x29E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_Burn_Swing_R;                              // 0x29F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_Burn_Swing_L;                              // 0x29F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_Burn_Thrust_R;                             // 0x2A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_Burn_Thrust_L;                             // 0x2A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_Burn_Dodge;                                // 0x2A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_L_Hand_Location;                                // 0x2A18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon_Stuck_Collision_Times;                      // 0x2A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Grip_Slide;                                 // 0x2A34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Grip_Slide;                                 // 0x2A35(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Offhand_Searching_Grip;                          // 0x2A36(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Weapon_Attached;                            // 0x2A37(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_R_Hand_Location;                                // 0x2A38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Get_Up_Rate;                                       // 0x2A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Headless;                                          // 0x2A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A59[0x7];                                     // 0x2A59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Crawl_Rate;                                        // 0x2A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FVector>             Bone_Constraints_Ded;                              // 0x2A68(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FVector>             Bone_Constraints_Current;                          // 0x2AB8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        AI_Armor_Invincibility_Rate;                       // 0x2B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Last_Hit_Impulse__Feet_;                           // 0x2B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Hit_Impulse__Other_Body_;                     // 0x2B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dodge_Vector_Proxy;                                // 0x2B20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_M_Sound_Upper;                               // 0x2B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Armor_M_Sound_Lower;                               // 0x2B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Delta_Milliseconds;                                // 0x2B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4C[0x4];                                     // 0x2B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Ground_Unevenness_R;                               // 0x2B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ground_Unevenness_L;                               // 0x2B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blocking_Hit;                                      // 0x2B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blocking_Hit_0;                                    // 0x2B61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B62[0x6];                                     // 0x2B62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Threat_Location;                                   // 0x2B68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Hand_Stamina_Burn_Rate;                          // 0x2B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoH_Alt_Stamina_Burn_Rate;                        // 0x2B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoH_Default_Stamina_Burn_Rate;                    // 0x2B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Hand_Stamina_Burn_Rate;                          // 0x2B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                R_GripType_Alternative;                            // 0x2BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA1[0x3];                                     // 0x2BA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         R_Weapon_Mass;                                     // 0x2BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Weapon_Mass;                                     // 0x2BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAC[0x4];                                     // 0x2BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Last_On_Ground_Position;                           // 0x2BB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player;                                            // 0x2BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Stunned;                                        // 0x2BC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BCA[0x6];                                     // 0x2BCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        R_Weapon_Length_2H;                                // 0x2BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Weapon_Length_Alt;                               // 0x2BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AI_Invincibility_Weapon_R;                         // 0x2BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AI_Invincibility_Weapon_L;                         // 0x2BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hands_Rigidity__Gauntlets_;                        // 0x2BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Consciousness_Cap;                                 // 0x2BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Block_L_OffHand_Grab;                              // 0x2C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tick_Enabled;                                      // 0x2C01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DressUp;                                           // 0x2C02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C03[0x5];                                     // 0x2C03(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStr_Loadout_Equipment                 Load_Equipment;                                    // 0x2C08(0x08A0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class USG_Equipment_C*                        SG_Equipment;                                      // 0x34A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Between_Hands_2H;                         // 0x34B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Talking;                                           // 0x34B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VO_Key_Pressed;                                    // 0x34B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Give_Up_2__Temp_;                                  // 0x34BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Break_L_Constraint_Pending;                        // 0x34BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_VoiceType                                Enum_VoiceType;                                    // 0x34BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34BD[0x3];                                     // 0x34BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volume_Screaming;                                  // 0x34C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Gurgling;                                   // 0x34C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Voice_Pain;                                        // 0x34D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34D1[0x7];                                     // 0x34D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Helmet_Strap_Power;                                // 0x34D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Get_Up_Rate_Interp;                                // 0x34E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Getup_Animation_State;                             // 0x34E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TwoH_Switched_Hands__Temp_;                        // 0x34F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34F1[0x7];                                     // 0x34F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        R_Constraint_Force_Check;                          // 0x34F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Constraint_Force_Check;                          // 0x3500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Block_Offhand_Attach;                              // 0x3508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3509[0x3];                                     // 0x3509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weapon_Stuck_Counter_2H;                           // 0x350C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon_Stuck_Counter_2H_2;                         // 0x3510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3514[0x4];                                     // 0x3514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AModularWeaponBP_C*                     Foot_R_Weapon;                                     // 0x3518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            Foot_R_Weapon_Constraint;                          // 0x3520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Kicking__R;                                        // 0x3528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3529[0x3];                                     // 0x3529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Kick_Rate_R;                                       // 0x352C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kicking__L;                                        // 0x3530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3531[0x3];                                     // 0x3531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Kick_Rate_L;                                       // 0x3534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AModularWeaponBP_C*                     Foot_L_Weapon;                                     // 0x3538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Blunt_Hit_Sound_Volume;                       // 0x3540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Sharp_Hit_Sound_Volume;                       // 0x3548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Bone_Hit_Sound;                               // 0x3550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         R_Arm_Stuck_behind_Back_Counter;                   // 0x3558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Arm_Stuck_behind_Back_Counter;                   // 0x355C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Hand_Soff_Attach_Distance;                       // 0x3560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        L_Hand_Attach_Point;                               // 0x3568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        L_Hand_Soft_Attach_Dot;                            // 0x3570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Hand_Soft_Attach_Distance;                       // 0x3578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        R_Haand_Attach_Point;                              // 0x3580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          R_Hand_Soft_Not_Attached;                          // 0x3588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3589[0x7];                                     // 0x3589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Last_Damage_Taken;                                 // 0x3590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Last_Damaged_Bone;                                 // 0x3598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Soft_Not_Attached;                          // 0x35A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Hand_Soft_Not_Rotated;                           // 0x35A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hands_Switching__2H_;                              // 0x35A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A3[0x5];                                     // 0x35A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            Foot_L_Weapon_Constraint;                          // 0x35A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Index;                                      // 0x35B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crouch_Key_Holding;                                // 0x35B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Kick_Cooldown;                                     // 0x35B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Versus__Temp_;                                     // 0x35B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35B7[0x1];                                     // 0x35B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Head;                   // 0x35B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Neck;                   // 0x35C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Upper_Body;             // 0x35D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Lower_Body;             // 0x35E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Arm_R;                  // 0x35F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Arm_L;                  // 0x3608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Leg_R;                  // 0x3618(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Leg_L;                  // 0x3628(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBodyPart_Enum                                Last_Hit_Body_Part;                                // 0x3638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ass_touching_ground;                               // 0x3639(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_363A[0x6];                                     // 0x363A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          Dism_VP_Collision_Box_1;                           // 0x3640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Dism_VP_Collision_Box_2;                           // 0x3648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        R_Step_Height;                                     // 0x3650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Step_Height;                                     // 0x3658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hand_L_Twist_Dot;                                  // 0x3660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Elbow_L_Twist_Dot;                                 // 0x3668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hand_R_Twist_Dot;                                  // 0x3670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Elbow_R_Twist_Dot;                                 // 0x3678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Swing_Direction_SlowDown__Inertia_;                // 0x3680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_Weapon_Trail_Blood_Block;                    // 0x3688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_On_Death_Blood_Emitter;                      // 0x3689(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_368A[0x6];                                     // 0x368A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARunningBlood_BP_C*>             Running_Blood_Array;                               // 0x3690(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Ass_Touches_Ground_Location;                       // 0x36A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Dismembered_Limb;                                  // 0x36B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Upper_Body_0;           // 0x36C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> Array_VP_Bones_Upper_Body_1;           // 0x36D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMeshComponent*>         Dismember_Child_Parts;                             // 0x36E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         Dismember_Parent_Parts;                            // 0x36F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Grab_R_Release_Rate;                               // 0x3700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Grab_L_Release_Rate;                               // 0x3708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hat_Not_Removable;                                 // 0x3710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3711[0x7];                                     // 0x3711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_DismembermentPart, bool>            Dismembered_Parts_Map;                             // 0x3718(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, struct FVertexDetectMeshDataPerLODStruct> Currently_VP_Painted_Dismembered_Mesh;     // 0x3768(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, class USkeletalMeshComponent*>    Dismember_Parent_Parts_0;                          // 0x37B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<int32, class USkeletalMeshComponent*>    Dismember_Child_Parts_0;                           // 0x3808(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class USkeletalMeshComponent*, int32>    Dismember_Parent_Parts_1;                          // 0x3858(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Blood_Rate;                                        // 0x38A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gore_Rate;                                         // 0x38B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<Enum_DismembermentPart, bool>            Block_Dismember_Part_Armor;                        // 0x38B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Block_Grab_R;                                      // 0x3908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Block_Grab_L;                                      // 0x3909(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390A[0x2];                                     // 0x390A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Give_Up_Weapon_To_Throat_Int;                      // 0x390C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_R_Begin;                                      // 0x3910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_L_Begin;                                      // 0x3911(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3912[0x6];                                     // 0x3912(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Step_Height;                                       // 0x3918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_SheathSlot_Concrete                      R_Sheath_Slot_Concrete;                            // 0x3920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_SheathSlot_Concrete                      L_Sheath_Slot_Concrete;                            // 0x3921(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grab_R_Unsheath;                                   // 0x3922(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3923[0x5];                                     // 0x3923(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Foot_R_Hitting_Component;                          // 0x3928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Foot_L_Hitting_Component;                          // 0x3930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Weapon_Stuck_Float;                                // 0x3938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Consciousness_2__Legs_;                            // 0x3940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Arm_R_Broken;                                      // 0x3948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Arm_L_Broken;                                      // 0x3949(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leg_R_Broken;                                      // 0x394A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leg_L_Broken;                                      // 0x394B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Neck_Snapped;                                      // 0x394C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wearing_Shoes;                                     // 0x394D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394E[0x2];                                     // 0x394E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Stumble_Direction;                                 // 0x3950(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arrow_Time;                                        // 0x3968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Mutation_Inhibitor;                          // 0x3970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USG_PlayerProgression_C*                SG_Gauntlet_Progress;                              // 0x3978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EArmorSlots_Enum, class UClass*>         ArmorSlots;                                        // 0x3980(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          Use_External_Armor_Slots;                          // 0x39D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_39D1[0x3];                                     // 0x39D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Faction_Buff_Int;                                  // 0x39D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fast_Spawn;                                        // 0x39D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Slomo_Active;                                      // 0x39D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39DA[0x6];                                     // 0x39DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EArmorSlots_Enum>                      Dropping_Armors_Array;                             // 0x39E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EArmorSlots_Enum                              Currently_Dropped_Armor;                           // 0x39F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39F1[0x7];                                     // 0x39F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewVar;                                            // 0x39F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewVar_0;                                          // 0x3A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ass_Rotation_Thrust;                               // 0x3A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unsheath_in_Progress;                              // 0x3A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Quick_Unsheath;                                    // 0x3A11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cheat_K;                                           // 0x3A12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cheat_Y;                                           // 0x3A13(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Just_Thrusted_R;                                   // 0x3A14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Just_Thrusted_L;                                   // 0x3A15(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Startup_Weapons();
	void Add_Vertex_Paint_Blood(const struct FVector& Location, class FName bone, double Size, double Rate, int32 Channel);
	double Adjust_Interp_Speed_to_FPS();
	void AI__Unstuck_Jammed_Weapons();
	void Ai_Finish_Thrust();
	void Apply_Settings(double FOV);
	void Assign_L_Weapon_Slot();
	void Assign_R_Weapon_Slot();
	void Attach_Decal(class UDecalComponent* Decal, const struct FAttached_Transform_Str& Attach_Param, bool* Nul);
	void Attach_L_Hand_To_Offhand_Position();
	void BndEvt__BP_ThirdPersonCharacter_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_0_VertexColorGetAllVertexColorsOnly__DelegateSignature(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetColorsOnlySettings& GotAllVertexColorsWithSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData);
	void BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_2_VertexColorGetClosestVertexData__DelegateSignature(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetClosestVertexDataSettings& DetectedMeshWithSettings, const struct FRVPDPClosestVertexDataResults& ClosestVertexInfo, const struct FRVPDPEstimatedColorAtHitLocationInfo& EstimatedColorAtHitLocationInfo, const struct FRVPDPAverageColorInAreaInfo& AvarageColorInAreaInfo, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData);
	void BndEvt__Willie_BP_Gut_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Box_Vertex_Paint(class UBoxComponent* Box, class FName Hit_Bone, class UPrimitiveComponent* Hit_Primitive_Component, bool* Nul);
	void BOXX2(Enum_DismembermentPart Index_0);
	void BOXXX(class UBoxComponent* VP_Collision_Box_1, class UBoxComponent* VP_Collision_Box_2);
	void Break_Arm_L();
	void Break_Arm_R();
	void Break_L_Constraint(bool Slide);
	void Break_Leg_L();
	void Break_Leg_R();
	void Break_R_Constraint();
	void Call_Minus_Enemy();
	void Camera_Shake_Timeline__FinishedFunc();
	void Camera_Shake_Timeline__UpdateFunc();
	void Check_Available_Weapon_L_in_All_Slots();
	void Check_Available_Weapon_R_in_All_Slots();
	void Check_if_L_Holding_Weapon();
	void Check_if_R_Holding_Weapon();
	void Check_Scabbard_Unsheath_State_L(class UPhysicsConstraintComponent* Sheath_Constraint, ESheathSlots_Enum Sheath_Enum, bool Unsheathing, double Length);
	void Check_Scabbard_Unsheath_State_R(class UPhysicsConstraintComponent* Sheath_Constraint, ESheathSlots_Enum Sheath_Enum, bool Unsheathing, double Length);
	void Clamp_Rotator(const struct FRotator& InRot, double MinAngleDegrees_X, double MaxAngleDegrees_X, double MinAngleDegrees_Y, double MaxAngleDegrees_Y, double MinAngleDegrees_Z, double MaxAngleDegrees_Z, struct FRotator* Return_Clamped, struct FRotator* Return_Free);
	void Control_Physical_Animation_Str(class UPhysicalAnimationComponent* Physical_Animation);
	void Create_Sheath_Constraint_L(EWeapon_Slots_Enum Slot);
	void Create_Sheath_Constraint_R(EWeapon_Slots_Enum Slot);
	class USceneComponent* Current_Offhand_Position_Scene();
	void CustomEvent(Enum_DismembermentPart InputPin, class UPhysicsConstraintComponent* Target);
	double Damage_Rate();
	void Deal_Complex_Damage(class UPrimitiveComponent* Hit_Component_0, class UPrimitiveComponent* Collided_Component, class FName Hit_Bone, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Hit_Velocity, const struct FVector& Hit_Impulse, double Cutting_Power, double Stab_Rate, double Rigidity, int32 Blunt_Destruction_Int, bool Lower_Threshold_In, bool Damage_Parent_Bone_, double Kick_Power, class UBoxComponent* Hit_Box, bool Ignore_Invincibility, EPhysicalSurface* Hit_Surface, double* Damage_Out, double* Cutting_Rate_Out, double* Rigidity_Out, double* Material_Density_Out, bool* Lower_Threshold_Out);
	void Death();
	void Death_Timeline__FinishedFunc();
	void Death_Timeline__UpdateFunc();
	void Destroy_Willie();
	void Disentergrate();
	void Disintegrate_and_drop_armor(bool Condition__Temp_);
	void Dismember_Cut(class FName bone, const struct FVector& Location, class UPrimitiveComponent* Cut_Mesh, int32 Dism_Cut_Level, class UBoxComponent* VP_Collision_Box_1, class UBoxComponent* VP_Collision_Box_2);
	void Dismember_Function_Delayed(class USkeletalMeshComponent* Master_Mesh, Enum_DismembermentPart Dismembered_Part, class UPrimitiveComponent* Attach_Marker, TArray<class UPrimitiveComponent*>& Overlapped_Markers, class UBoxComponent* VP_Box_Collision_1, class UBoxComponent* VP_Box_Collision_2, class UPrimitiveComponent* Dismember_Weapon, class USkeletalMeshComponent** Spawned_Limb_Local1);
	void Dismember_Function_Initiate(class USkeletalMeshComponent* Master_Mesh, Enum_DismembermentPart Dismembered_Part, class UPrimitiveComponent* Attach_Marker, TArray<class UPrimitiveComponent*>& Overlapped_Markers, class UBoxComponent* VP_Box_Collision_1, class UBoxComponent* VP_Box_Collision_2, class UPrimitiveComponent* Dismember_Weapon);
	void Draw_Weapon(ELeftRight_Enum Hand, ELeftRight_Enum Side, EWeapon_Slots_Enum Slot);
	void Dying();
	void End_Arrow_Time_Event();
	void Event_Add_Blood_EmitterTo_Hit_Object(const struct FTransform& SpawnTransform, double Spawn_Rate, class USceneComponent* Parent);
	void Event_Add_Sheathed_Weapon();
	void Event_Block_L_OffHand_Grab();
	void Event_Clear_Sheathed_Weapon_Slots();
	void Event_Slide_Right_Hand_Along_Shaft();
	void Event_Versus_Lost();
	void ExecuteUbergraph_Willie_BP(int32 EntryPoint);
	void Explode_Head();
	void Fall();
	void Fallen_Give_Up_TL__FinishedFunc();
	void Fallen_Give_Up_TL__UpdateFunc();
	void Feet_Rotation_and_Normal();
	void Find_Node_Time_Begin();
	void Find_Node_Time_End();
	double Find_Sheath_Length(class AModularWeaponBP_C* InputPin);
	struct FVector Find_Thrusting_Location(EGripType_Enum Grip_Typr, double Thrust_Position, double Y_0);
	void Force_Fall_Down_Event();
	void Force_FPP();
	void Force_TPP();
	void Get_Damage(const struct FVector& Impulse, const struct FVector& Velocity, const struct FVector& Location, const struct FVector& Normal, class FName bone, double Raw_Damage, double Cutting_Power, bool Inside, class UPrimitiveComponent* Damaged_Mesh, int32 Dism_Blunt, bool Lower_Threshold, bool Shockwave, class UPrimitiveComponent* Hit_By_Component, bool Stab_, class UBoxComponent* Hit_Box, bool Ignore_Invincibility, double* Damage_Out);
	void Get_Damage_0(const struct FVector& Impulse, const struct FVector& Velocity, const struct FVector& Location, const struct FVector& Normal, class FName bone, double Raw_Damage, double Cutting_Power, bool Inside, class UPrimitiveComponent* Damaged_Mesh, int32 Dism_Blunt, bool Lower_Threshold, bool Shockwave, class UPrimitiveComponent* Hit_By_Component, double* Damage_Out);
	void InpActEvt_C_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_CapsLock_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Change_Camera_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Crouch_Hold_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Crouch_Hold_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Crouch_Key_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Crouch_Key_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Grab_Left_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Grab_Left_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Grab_Right_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Grab_Right_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputDebugKeyEvent_1(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_L_K2Node_InputDebugKeyEvent_0(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_P_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Pause_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Run_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Run_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_SloMo_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Swap_Hands_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Thrust_Gamepad_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Thrust_Gamepad_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Thrust_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Thrust_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Toggle_Camera_Lock_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpAxisEvt_Key_Forward_K2Node_InputAxisEvent_4(float AxisValue);
	void InpAxisEvt_Key_Right_K2Node_InputAxisEvent_5(float AxisValue);
	void InpAxisEvt_Left_Arm_Axis_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_Left_Guard_Axis_K2Node_InputAxisEvent_7(float AxisValue);
	void _Down_Gamepad_K2Node_InputAxisEvent_1(float AxisValue);
	void _Down_Mouse_K2Node_InputAxisEvent_17(float AxisValue);
	void _Backward_K2Node_InputAxisEvent_14(float AxisValue);
	void _Left_K2Node_InputAxisEvent_19(float AxisValue);
	void InpAxisEvt_Right_Arm_Axis_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_Right_Guard_Axis_K2Node_InputAxisEvent_6(float AxisValue);
	void _Left_Gamepad_K2Node_InputAxisEvent_0(float AxisValue);
	void _Left_Mouse_K2Node_InputAxisEvent_16(float AxisValue);
	void Kick_Event();
	void Kick_L_Timeline__FinishedFunc();
	void Kick_L_Timeline__UpdateFunc();
	void Kick_R_Timeline__FinishedFunc();
	void Kick_R_Timeline__UpdateFunc();
	void Kneel_Event();
	void L_Hand_Sheath_Start();
	double L_Hand_Stamina_Burn_Rate_f();
	void L_Step_Timeline__FinishedFunc();
	void L_Step_Timeline__UpdateFunc();
	void Load_Save();
	void Load_Save_Give_Up();
	void Move_L_Hand_To_Not_Awkward_Position();
	void Muscle_Motor(class USkeletalMeshComponent* Body_Mesh, bool UpperBody);
	void Paint_Blood_Bleed(const struct FVector& Location, class FName BoneName, double Size, double Rate);
	void Paint_Blood_Splash(const struct FVector& Location, class FName BoneName, double Size, double Rate);
	void Pick_Up_Armor(class USceneComponent* Picked_Armor, class ABP_Armor_Master_C* Armor_Actor);
	void Pick_Up_Left_Event();
	void Pick_Up_Right_Event();
	void Pickup_Weapon_Sound(class AModularWeaponBP_C* InputPin);
	void Play_Curse_VO();
	void Play_Pain_Sound(double Volume);
	void Polearm_Hands_Switch();
	void R_Hand_Sheath_Start();
	double R_Hand_Stamina_Burn_Rate_f();
	void R_Step_Timeline__FinishedFunc();
	void R_Step_Timeline__UpdateFunc();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	struct FTransform Relative_Rotate(const struct FTransform& InputPin, const struct FRotator& Rotation);
	void Release_Grab_L();
	void Release_Grab_R();
	void Release_No_Dismember_Bones();
	void Release_Offhand();
	void Remove_Armor(class UClass* Class_0, const struct FTransform& SpawnTransform, const EArmorSlots_Enum& Key, bool Use_Spawn_Transform, class ABP_Armor_Master_C** Dropped_Armor);
	void Remove_Hat();
	void Rescale_Character();
	void Reset_Blood_Bleed();
	void Reset_Blood_Splash();
	void Reset_Body_Hit_Sound();
	void Reset_Last_Damage_Taken();
	void Reset_Latest_Complex_Damage();
	void Reset_Latest_VP_Damage();
	void Reset_OffHand_Locked();
	void Reset_Parry();
	void Reset_Step_Sound_L();
	void Reset_Step_Sound_R();
	void Reset_Sustained_Damage();
	void Reset_Trail_Blood(float Duration);
	void Save_Loadout();
	void Send_Threat_Location_R(const struct FVector& Threat_Location_0, const struct FVector& Offset, bool Immediate, bool* Nul);
	void Set_Arm_Aim_Location(double Control_Rate, class USceneComponent* Aim_Scene, class USceneComponent* Shoulder_Scene, const struct FRotator& Aim_Roataion, const struct FVector& Default_Arm_Position, EGripType_Enum Grip, double A, struct FVector* Result);
	void Set_Arm_Aim_Rotation(class USceneComponent* Shoulder_Scene, double Y_0, double X_0, bool Guarding_, double Control_Rate, const struct FRotator& Aim_ROtation, class FName Hand_Socket_Name, struct FRotator* Result);
	void Set_Arm_IK_Relative_Rotation(double Control_Rate, float Wrist_Direction, class USceneComponent* Shoulder_Scene, EGripType_Enum Grip_Type, struct FRotator* Result);
	void Set_Pain_Location(class FName BoneName, const struct FVector& A);
	void Set_Shoulder_Rotation(double Control_Rate, const struct FRotator& Aim_ROtation, struct FRotator* Result);
	void Set_Up_Armor(bool Clear_Previous, bool Load_Saved_Armor, bool Save_Armor, const struct FStr_Loadout_Equipment& Load_Armor);
	void Set_Up_Left_Hand_Weapon(class UClass* Weapon_Class, class AModularWeaponBP_C* Weapon_L_0, bool Dropped_With_no_Damage, bool Destroy_Previous, const struct FStr_WeaponParts& Str_Weapon_Parts);
	void Set_Up_Right_Hand_Weapon(class UClass* Weapon_Class, class AModularWeaponBP_C* Weapon_R_0, bool Dropped_With_no_Damage, bool Destroy_Previous, const struct FStr_WeaponParts& Str_Weapon_Parts);
	double Set_X(class USceneComponent* Shoulder_Scene, double X_Offset);
	double Set_Y(class USceneComponent* Shoulder_Scene, double Y_Offset);
	void Setup_Character_Event();
	void Sheath_L(class FName Sheath_Slot, bool Scabbard_);
	void Sheath_R(class FName Sheath_Slot, bool Scabbard_);
	void Sheathe_on_Spawn(class AModularWeaponBP_C* Weapon, ESheathSlots_Enum Slot);
	void Slomo_Timeline__FinishedFunc();
	void Slomo_Timeline__UpdateFunc();
	void Snap_Neck();
	void Spawn_Blood(const struct FTransform& Transform, double Spawn_Rate, class FName bone, EBodyPart_Enum Body_Partt, class USkeletalMeshComponent* Body_Mesh, int32 Loop_Count, bool Extra_Velocity, const struct FVector& Velocity, const struct FVector& Pover, bool Skip_Check);
	void Spawn_Limb_No_Mesh_Merge(EWillie_Bones_Enum NewLocalVar1, class USkeletalMeshComponent* Affected_Mesh, int32 Dism_Level1, class USkeletalMeshComponent** Spawned_Limb_Local1);
	void Spill_Guts();
	void Stop_Detached_Blood_Emitters();
	void StopThatBlade(double Power, bool* Nul);
	void Swap_Weapons();
	void Thrust_L();
	void Thrust_R();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Timeline_6__UpdateFunc();
	void Timeline_7__FinishedFunc();
	void Timeline_7__UpdateFunc();
	void Timeline_8__FinishedFunc();
	void Timeline_8__UpdateFunc();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void Toggle_Invert();
	void Un_Kneel_Event();
	void Unsheath_Event_L_Delayed(class UPrimitiveComponent* Grab_Component_R_0);
	void Unsheath_Event_R_Delayed(class UPrimitiveComponent* Grab_Component_R_0);
	void Unsheath_L(class AModularWeaponBP_C* Unsheathed_Weapon);
	void Unsheath_R(class AModularWeaponBP_C* Unsheathed_Weapon);
	void Unsheath_R_Event();
	void Update_Aim();
	void UserConstructionScript();
	void Velocity_Calculator_V(const struct FVector& Current_Location, const struct FVector& Delayed_Location, struct FVector* Velocity, struct FVector* Delayed_Out);
	void VO_Curse();
	void VO_Deescalate();
	void VO_Insult();
	void VO_Interrupt();
	void VO_Plead();
	void Wake_Up();
	void Weapon_HIt(class UPrimitiveComponent* Hit_Component_0, const struct FVector& Weapon_Velocity, const struct FHitResult& Hit_Result, double EdgeAllignment_Dot, bool Laser_temp_, class UClass* Weapon);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Willie_BP_C">();
	}
	static class AWillie_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWillie_BP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AWillie_BP_C) == 0x000010, "Wrong alignment on AWillie_BP_C");
static_assert(sizeof(AWillie_BP_C) == 0x003A20, "Wrong size on AWillie_BP_C");
static_assert(offsetof(AWillie_BP_C, UberGraphFrame) == 0x000670, "Member 'AWillie_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Box1) == 0x000678, "Member 'AWillie_BP_C::Box1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicalAnimation1) == 0x000680, "Member 'AWillie_BP_C::PhysicalAnimation1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_10) == 0x000688, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_9) == 0x000690, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_8) == 0x000698, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_7) == 0x0006A0, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_6) == 0x0006A8, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_5) == 0x0006B0, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_4) == 0x0006B8, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_3) == 0x0006C0, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_2) == 0x0006C8, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_L_1) == 0x0006D0, "Member 'AWillie_BP_C::DM_Sphere_Foot_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_20) == 0x0006D8, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_20' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_19) == 0x0006E0, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_19' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_18) == 0x0006E8, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_18' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_17) == 0x0006F0, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_17' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_16) == 0x0006F8, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_15) == 0x000700, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_14) == 0x000708, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_13) == 0x000710, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_12) == 0x000718, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_11) == 0x000720, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_10) == 0x000728, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_8) == 0x000730, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_9) == 0x000738, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_7) == 0x000740, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_6) == 0x000748, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_5) == 0x000750, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_4) == 0x000758, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_3) == 0x000760, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_2) == 0x000768, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_L_1) == 0x000770, "Member 'AWillie_BP_C::DM_Sphere_Calf_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_16) == 0x000778, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_15) == 0x000780, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_14) == 0x000788, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_13) == 0x000790, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_12) == 0x000798, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_11) == 0x0007A0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_10) == 0x0007A8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_9) == 0x0007B0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_8) == 0x0007B8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_7) == 0x0007C0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_6) == 0x0007C8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_5) == 0x0007D0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_4) == 0x0007D8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_3) == 0x0007E0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_2) == 0x0007E8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_L_1) == 0x0007F0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_10) == 0x0007F8, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_9) == 0x000800, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_8) == 0x000808, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_7) == 0x000810, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_6) == 0x000818, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_5) == 0x000820, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_4) == 0x000828, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_3) == 0x000830, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_2) == 0x000838, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Foot_R_1) == 0x000840, "Member 'AWillie_BP_C::DM_Sphere_Foot_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_20) == 0x000848, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_20' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_19) == 0x000850, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_19' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_18) == 0x000858, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_18' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_17) == 0x000860, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_17' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_16) == 0x000868, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_15) == 0x000870, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_14) == 0x000878, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_13) == 0x000880, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_12) == 0x000888, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_11) == 0x000890, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_10) == 0x000898, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_9) == 0x0008A0, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_8) == 0x0008A8, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_7) == 0x0008B0, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_6) == 0x0008B8, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_5) == 0x0008C0, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_4) == 0x0008C8, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_3) == 0x0008D0, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_2) == 0x0008D8, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Calf_R_1) == 0x0008E0, "Member 'AWillie_BP_C::DM_Sphere_Calf_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_16) == 0x0008E8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_15) == 0x0008F0, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_14) == 0x0008F8, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_13) == 0x000900, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_12) == 0x000908, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_11) == 0x000910, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_10) == 0x000918, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_9) == 0x000920, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_8) == 0x000928, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_7) == 0x000930, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_6) == 0x000938, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_5) == 0x000940, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_4) == 0x000948, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_3) == 0x000950, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_2) == 0x000958, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Thigh_R_1) == 0x000960, "Member 'AWillie_BP_C::DM_Sphere_Thigh_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_10) == 0x000968, "Member 'AWillie_BP_C::DM_Sphere_Head_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_9) == 0x000970, "Member 'AWillie_BP_C::DM_Sphere_Head_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_8) == 0x000978, "Member 'AWillie_BP_C::DM_Sphere_Head_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_7) == 0x000980, "Member 'AWillie_BP_C::DM_Sphere_Head_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_6) == 0x000988, "Member 'AWillie_BP_C::DM_Sphere_Head_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_5) == 0x000990, "Member 'AWillie_BP_C::DM_Sphere_Head_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_4) == 0x000998, "Member 'AWillie_BP_C::DM_Sphere_Head_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_3) == 0x0009A0, "Member 'AWillie_BP_C::DM_Sphere_Head_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_2) == 0x0009A8, "Member 'AWillie_BP_C::DM_Sphere_Head_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Head_1) == 0x0009B0, "Member 'AWillie_BP_C::DM_Sphere_Head_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_02_6) == 0x0009B8, "Member 'AWillie_BP_C::DM_Sphere_Neck_02_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_02_5) == 0x0009C0, "Member 'AWillie_BP_C::DM_Sphere_Neck_02_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_02_4) == 0x0009C8, "Member 'AWillie_BP_C::DM_Sphere_Neck_02_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_02_3) == 0x0009D0, "Member 'AWillie_BP_C::DM_Sphere_Neck_02_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_02_2) == 0x0009D8, "Member 'AWillie_BP_C::DM_Sphere_Neck_02_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_02_1) == 0x0009E0, "Member 'AWillie_BP_C::DM_Sphere_Neck_02_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_01_6) == 0x0009E8, "Member 'AWillie_BP_C::DM_Sphere_Neck_01_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_01_5) == 0x0009F0, "Member 'AWillie_BP_C::DM_Sphere_Neck_01_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_01_4) == 0x0009F8, "Member 'AWillie_BP_C::DM_Sphere_Neck_01_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_01_3) == 0x000A00, "Member 'AWillie_BP_C::DM_Sphere_Neck_01_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_01_2) == 0x000A08, "Member 'AWillie_BP_C::DM_Sphere_Neck_01_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Neck_01_1) == 0x000A10, "Member 'AWillie_BP_C::DM_Sphere_Neck_01_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_17) == 0x000A18, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_17' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_16) == 0x000A20, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Hand_L_1) == 0x000A28, "Member 'AWillie_BP_C::DM_Sphere_Hand_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_25) == 0x000A30, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_25' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_24) == 0x000A38, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_24' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_23) == 0x000A40, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_23' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_22) == 0x000A48, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_22' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_21) == 0x000A50, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_21' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_20) == 0x000A58, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_20' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_19) == 0x000A60, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_19' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_18) == 0x000A68, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_18' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_17) == 0x000A70, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_17' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_16) == 0x000A78, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_15) == 0x000A80, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_14) == 0x000A88, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Loweararm_L_13) == 0x000A90, "Member 'AWillie_BP_C::DM_Sphere_Loweararm_L_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_12) == 0x000A98, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_11) == 0x000AA0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_10) == 0x000AA8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_9) == 0x000AB0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_8) == 0x000AB8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_7) == 0x000AC0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_6) == 0x000AC8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_5) == 0x000AD0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_4) == 0x000AD8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_3) == 0x000AE0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_2) == 0x000AE8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_L_1) == 0x000AF0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Clavicle_L_5) == 0x000AF8, "Member 'AWillie_BP_C::DM_Sphere_Clavicle_L_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Clavicle_L_4) == 0x000B00, "Member 'AWillie_BP_C::DM_Sphere_Clavicle_L_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Clavicle_L_1) == 0x000B08, "Member 'AWillie_BP_C::DM_Sphere_Clavicle_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Clavicle_R_3) == 0x000B10, "Member 'AWillie_BP_C::DM_Sphere_Clavicle_R_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Clavicle_R_2) == 0x000B18, "Member 'AWillie_BP_C::DM_Sphere_Clavicle_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Hand_R_1) == 0x000B20, "Member 'AWillie_BP_C::DM_Sphere_Hand_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_25) == 0x000B28, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_25' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_23) == 0x000B30, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_23' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_24) == 0x000B38, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_24' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_23) == 0x000B40, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_23' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_22) == 0x000B48, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_22' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_21) == 0x000B50, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_21' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_20) == 0x000B58, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_20' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Clavicle_R_1) == 0x000B60, "Member 'AWillie_BP_C::DM_Sphere_Clavicle_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_18) == 0x000B68, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_18' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_17) == 0x000B70, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_17' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_16) == 0x000B78, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_16' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_15) == 0x000B80, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_14) == 0x000B88, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Lowerarm_R_13) == 0x000B90, "Member 'AWillie_BP_C::DM_Sphere_Lowerarm_R_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_12) == 0x000B98, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_11) == 0x000BA0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_10) == 0x000BA8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_9) == 0x000BB0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_8) == 0x000BB8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_7) == 0x000BC0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_6) == 0x000BC8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_5) == 0x000BD0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_4) == 0x000BD8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_3) == 0x000BE0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_2) == 0x000BE8, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Upperarm_R_1) == 0x000BF0, "Member 'AWillie_BP_C::DM_Sphere_Upperarm_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Disentegrate_Point) == 0x000BF8, "Member 'AWillie_BP_C::Disentegrate_Point' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_15) == 0x000C00, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_15' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_14) == 0x000C08, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_14' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_13) == 0x000C10, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_13' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_12) == 0x000C18, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_12' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_11) == 0x000C20, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_11' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_10) == 0x000C28, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_10' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_9) == 0x000C30, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_8) == 0x000C38, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_7) == 0x000C40, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_6) == 0x000C48, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_5) == 0x000C50, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_4) == 0x000C58, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_3) == 0x000C60, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_2) == 0x000C68, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_1) == 0x000C70, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_05_0) == 0x000C78, "Member 'AWillie_BP_C::DM_Sphere_Spine_05_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_7) == 0x000C80, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_6) == 0x000C88, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_5) == 0x000C90, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_4) == 0x000C98, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_3) == 0x000CA0, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_2) == 0x000CA8, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_1) == 0x000CB0, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_04_0) == 0x000CB8, "Member 'AWillie_BP_C::DM_Sphere_Spine_04_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_7) == 0x000CC0, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_6) == 0x000CC8, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_5) == 0x000CD0, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_4) == 0x000CD8, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_3) == 0x000CE0, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_3) == 0x000CE8, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_2) == 0x000CF0, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_1) == 0x000CF8, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_03_0) == 0x000D00, "Member 'AWillie_BP_C::DM_Sphere_Spine_03_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_7) == 0x000D08, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_6) == 0x000D10, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_5) == 0x000D18, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_4) == 0x000D20, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_2) == 0x000D28, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_1) == 0x000D30, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Spine_02_0) == 0x000D38, "Member 'AWillie_BP_C::DM_Sphere_Spine_02_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_9) == 0x000D40, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_9' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_8) == 0x000D48, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_7) == 0x000D50, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_6) == 0x000D58, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_5) == 0x000D60, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_4) == 0x000D68, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_3) == 0x000D70, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_2) == 0x000D78, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis_1) == 0x000D80, "Member 'AWillie_BP_C::DM_Sphere_Pelvis_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DM_Sphere_Pelvis) == 0x000D88, "Member 'AWillie_BP_C::DM_Sphere_Pelvis' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BPC_RuntimeVertexPaintAndDetectionComponent) == 0x000D90, "Member 'AWillie_BP_C::BPC_RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, heavy_exertion_Cue) == 0x000D98, "Member 'AWillie_BP_C::heavy_exertion_Cue' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Arm_Sphere_Shoulder_R) == 0x000DA0, "Member 'AWillie_BP_C::Check_Stuck_Arm_Sphere_Shoulder_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Sphere_Armpit_R_0) == 0x000DA8, "Member 'AWillie_BP_C::Check_Stuck_Sphere_Armpit_R_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Sphere_Armpit_R_1) == 0x000DB0, "Member 'AWillie_BP_C::Check_Stuck_Sphere_Armpit_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BoneCore) == 0x000DB8, "Member 'AWillie_BP_C::BoneCore' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_LegL_dri) == 0x000DC0, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_LegL_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_Pelvis_dri) == 0x000DC8, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_Pelvis_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_ArmL_dri) == 0x000DD0, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_ArmL_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_ArmR_dri) == 0x000DD8, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_ArmR_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_LegR_dri) == 0x000DE0, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_LegR_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_Spine04_dri) == 0x000DE8, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_Spine04_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_Spine03_dri) == 0x000DF0, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_Spine03_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CollisionCapsule_Sheathed_Spine05_dri) == 0x000DF8, "Member 'AWillie_BP_C::CollisionCapsule_Sheathed_Spine05_dri' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Sphere_Armpit_L_1) == 0x000E00, "Member 'AWillie_BP_C::Check_Stuck_Sphere_Armpit_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Sphere_Armpit_L_0) == 0x000E08, "Member 'AWillie_BP_C::Check_Stuck_Sphere_Armpit_L_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Arm_Sphere_Shoulder_L) == 0x000E10, "Member 'AWillie_BP_C::Check_Stuck_Arm_Sphere_Shoulder_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Arm_Sphere_Back_Up) == 0x000E18, "Member 'AWillie_BP_C::Check_Stuck_Arm_Sphere_Back_Up' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Check_Stuck_Arm_Sphere_Back_Lo) == 0x000E20, "Member 'AWillie_BP_C::Check_Stuck_Arm_Sphere_Back_Lo' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DriverSkeleton) == 0x000E28, "Member 'AWillie_BP_C::DriverSkeleton' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BPC_PhotoMode) == 0x000E30, "Member 'AWillie_BP_C::BPC_PhotoMode' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, ChildActor) == 0x000E38, "Member 'AWillie_BP_C::ChildActor' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, FollowCamera1) == 0x000E40, "Member 'AWillie_BP_C::FollowCamera1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GrabPoint_L) == 0x000E48, "Member 'AWillie_BP_C::GrabPoint_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GrabPoint_R) == 0x000E50, "Member 'AWillie_BP_C::GrabPoint_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, SK_Skeleton) == 0x000E58, "Member 'AWillie_BP_C::SK_Skeleton' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Collison_Foot_L) == 0x000E60, "Member 'AWillie_BP_C::Collison_Foot_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Collison_Foot_R) == 0x000E68, "Member 'AWillie_BP_C::Collison_Foot_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_L_Hand) == 0x000E70, "Member 'AWillie_BP_C::IK_L_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_L_Elbow) == 0x000E78, "Member 'AWillie_BP_C::IK_L_Elbow' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_L_Shoulder) == 0x000E80, "Member 'AWillie_BP_C::IK_L_Shoulder' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulder_L_To_Elbow_Scene) == 0x000E88, "Member 'AWillie_BP_C::Shoulder_L_To_Elbow_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_R_Hand) == 0x000E90, "Member 'AWillie_BP_C::IK_R_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_R_Elbow) == 0x000E98, "Member 'AWillie_BP_C::IK_R_Elbow' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_R_Shoulder) == 0x000EA0, "Member 'AWillie_BP_C::IK_R_Shoulder' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulder_R_To_Elbow_Scene) == 0x000EA8, "Member 'AWillie_BP_C::Shoulder_R_To_Elbow_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_IK_Elbow_Scene) == 0x000EB0, "Member 'AWillie_BP_C::R_IK_Elbow_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_IK_Elbow_Scene) == 0x000EB8, "Member 'AWillie_BP_C::L_IK_Elbow_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, OffHandPosition_Twohanded) == 0x000EC0, "Member 'AWillie_BP_C::OffHandPosition_Twohanded' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, OffHand_Tune) == 0x000EC8, "Member 'AWillie_BP_C::OffHand_Tune' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsHandle_GetUp) == 0x000ED0, "Member 'AWillie_BP_C::PhysicsHandle_GetUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsHandle_LowerBody) == 0x000ED8, "Member 'AWillie_BP_C::PhysicsHandle_LowerBody' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsHandle_UpperBody) == 0x000EE0, "Member 'AWillie_BP_C::PhysicsHandle_UpperBody' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lock_On_Detector) == 0x000EE8, "Member 'AWillie_BP_C::Lock_On_Detector' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Threat_Detector) == 0x000EF0, "Member 'AWillie_BP_C::Threat_Detector' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, ForceFeedback) == 0x000EF8, "Member 'AWillie_BP_C::ForceFeedback' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsHandleR) == 0x000F00, "Member 'AWillie_BP_C::PhysicsHandleR' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsHandleL) == 0x000F08, "Member 'AWillie_BP_C::PhysicsHandleL' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Gut) == 0x000F10, "Member 'AWillie_BP_C::Gut' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Throat_Audio) == 0x000F18, "Member 'AWillie_BP_C::Throat_Audio' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Voice_Audio) == 0x000F20, "Member 'AWillie_BP_C::Voice_Audio' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Voice_Scene) == 0x000F28, "Member 'AWillie_BP_C::Voice_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CameraBoomFP) == 0x000F30, "Member 'AWillie_BP_C::CameraBoomFP' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Scene_FP) == 0x000F38, "Member 'AWillie_BP_C::Camera_Scene_FP' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, FollowCamera) == 0x000F40, "Member 'AWillie_BP_C::FollowCamera' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CameraBoom_Shoulder_) == 0x000F48, "Member 'AWillie_BP_C::CameraBoom_Shoulder_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Ik_Tune_Scene) == 0x000F50, "Member 'AWillie_BP_C::L_Hand_Ik_Tune_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Effector_Arm_L) == 0x000F58, "Member 'AWillie_BP_C::Effector_Arm_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulder_L_IK_Scene) == 0x000F60, "Member 'AWillie_BP_C::Shoulder_L_IK_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsConstraint_Z) == 0x000F68, "Member 'AWillie_BP_C::PhysicsConstraint_Z' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, StepSplineL) == 0x000F70, "Member 'AWillie_BP_C::StepSplineL' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, StepSplineR) == 0x000F78, "Member 'AWillie_BP_C::StepSplineR' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Wound_Location) == 0x000F80, "Member 'AWillie_BP_C::Wound_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsConstraint_Main) == 0x000F88, "Member 'AWillie_BP_C::PhysicsConstraint_Main' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Rot_Scene) == 0x000F90, "Member 'AWillie_BP_C::Head_Rot_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulders_Rot_Scene) == 0x000F98, "Member 'AWillie_BP_C::Shoulders_Rot_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_IK) == 0x000FA0, "Member 'AWillie_BP_C::R_Foot_IK' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_IK) == 0x000FA8, "Member 'AWillie_BP_C::L_Foot_IK' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Scene_Z) == 0x000FB0, "Member 'AWillie_BP_C::Ass_Scene_Z' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Knee_IK) == 0x000FB8, "Member 'AWillie_BP_C::R_Knee_IK' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Knee_IK) == 0x000FC0, "Member 'AWillie_BP_C::L_Knee_IK' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Scene_1) == 0x000FC8, "Member 'AWillie_BP_C::Ass_Scene_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Scene) == 0x000FD0, "Member 'AWillie_BP_C::Ass_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_IK_Rotated) == 0x000FD8, "Member 'AWillie_BP_C::L_Foot_IK_Rotated' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_IK_Rotated) == 0x000FE0, "Member 'AWillie_BP_C::R_Foot_IK_Rotated' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Ik_Tune_Scene) == 0x000FE8, "Member 'AWillie_BP_C::R_Hand_Ik_Tune_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, CameraBoom_Center_) == 0x000FF0, "Member 'AWillie_BP_C::CameraBoom_Center_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Scene) == 0x000FF8, "Member 'AWillie_BP_C::Camera_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicalAnimation) == 0x001000, "Member 'AWillie_BP_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Effector_Arm_R) == 0x001008, "Member 'AWillie_BP_C::Effector_Arm_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulder_R_IK_Scene) == 0x001010, "Member 'AWillie_BP_C::Shoulder_R_IK_Scene' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, First_Person_Camera) == 0x001018, "Member 'AWillie_BP_C::First_Person_Camera' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_8__Direction_7485C23547C60D079774AB9DF532A70E) == 0x001020, "Member 'AWillie_BP_C::Timeline_8__Direction_7485C23547C60D079774AB9DF532A70E' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_8) == 0x001028, "Member 'AWillie_BP_C::Timeline_8' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_7__Direction_34EA67334EE05B459126BB817346474D) == 0x001030, "Member 'AWillie_BP_C::Timeline_7__Direction_34EA67334EE05B459126BB817346474D' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_7) == 0x001038, "Member 'AWillie_BP_C::Timeline_7' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_6_Step_Progress_AABC9336483F3F1EBAD7B79727C93F97) == 0x001040, "Member 'AWillie_BP_C::Timeline_6_Step_Progress_AABC9336483F3F1EBAD7B79727C93F97' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_6__Direction_AABC9336483F3F1EBAD7B79727C93F97) == 0x001044, "Member 'AWillie_BP_C::Timeline_6__Direction_AABC9336483F3F1EBAD7B79727C93F97' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_6) == 0x001048, "Member 'AWillie_BP_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_4_Step_Progress_34205C1C425BFFA28B5F7D91DF39A84E) == 0x001050, "Member 'AWillie_BP_C::Timeline_4_Step_Progress_34205C1C425BFFA28B5F7D91DF39A84E' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_4__Direction_34205C1C425BFFA28B5F7D91DF39A84E) == 0x001054, "Member 'AWillie_BP_C::Timeline_4__Direction_34205C1C425BFFA28B5F7D91DF39A84E' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_4) == 0x001058, "Member 'AWillie_BP_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fallen_Give_Up_TL__Direction_2228E3CE4D44FEF3A5703AA46CED46B1) == 0x001060, "Member 'AWillie_BP_C::Fallen_Give_Up_TL__Direction_2228E3CE4D44FEF3A5703AA46CED46B1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fallen_Give_Up_TL) == 0x001068, "Member 'AWillie_BP_C::Fallen_Give_Up_TL' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_R_Timeline_NewTrack_0_F84060AA439F72BB32955484C01B4CCB) == 0x001070, "Member 'AWillie_BP_C::Kick_R_Timeline_NewTrack_0_F84060AA439F72BB32955484C01B4CCB' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_R_Timeline__Direction_F84060AA439F72BB32955484C01B4CCB) == 0x001074, "Member 'AWillie_BP_C::Kick_R_Timeline__Direction_F84060AA439F72BB32955484C01B4CCB' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_R_Timeline) == 0x001078, "Member 'AWillie_BP_C::Kick_R_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_L_Timeline_NewTrack_0_10DDEAB84D0DB13C16D578A5D5B3A7AA) == 0x001080, "Member 'AWillie_BP_C::Kick_L_Timeline_NewTrack_0_10DDEAB84D0DB13C16D578A5D5B3A7AA' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_L_Timeline__Direction_10DDEAB84D0DB13C16D578A5D5B3A7AA) == 0x001084, "Member 'AWillie_BP_C::Kick_L_Timeline__Direction_10DDEAB84D0DB13C16D578A5D5B3A7AA' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_L_Timeline) == 0x001088, "Member 'AWillie_BP_C::Kick_L_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_2__Direction_E22895D047DE6563EC0F6BA212E79F56) == 0x001090, "Member 'AWillie_BP_C::Timeline_2__Direction_E22895D047DE6563EC0F6BA212E79F56' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_2) == 0x001098, "Member 'AWillie_BP_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_Wake_Up_F85E27254B0CF6B4591A489E276C2487) == 0x0010A0, "Member 'AWillie_BP_C::Timeline_Wake_Up_F85E27254B0CF6B4591A489E276C2487' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline__Direction_F85E27254B0CF6B4591A489E276C2487) == 0x0010A4, "Member 'AWillie_BP_C::Timeline__Direction_F85E27254B0CF6B4591A489E276C2487' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline) == 0x0010A8, "Member 'AWillie_BP_C::Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Shake_Timeline_Shake_Cam_Z_AF53845A476CA1C87BEEBCB2EE885889) == 0x0010B0, "Member 'AWillie_BP_C::Camera_Shake_Timeline_Shake_Cam_Z_AF53845A476CA1C87BEEBCB2EE885889' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Shake_Timeline_Shake_Cam_Y_AF53845A476CA1C87BEEBCB2EE885889) == 0x0010B4, "Member 'AWillie_BP_C::Camera_Shake_Timeline_Shake_Cam_Y_AF53845A476CA1C87BEEBCB2EE885889' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Shake_Timeline_Shake_Cam_X_AF53845A476CA1C87BEEBCB2EE885889) == 0x0010B8, "Member 'AWillie_BP_C::Camera_Shake_Timeline_Shake_Cam_X_AF53845A476CA1C87BEEBCB2EE885889' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Shake_Timeline__Direction_AF53845A476CA1C87BEEBCB2EE885889) == 0x0010BC, "Member 'AWillie_BP_C::Camera_Shake_Timeline__Direction_AF53845A476CA1C87BEEBCB2EE885889' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Shake_Timeline) == 0x0010C0, "Member 'AWillie_BP_C::Camera_Shake_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_5_Step_Progress_E86A26BC4439C443728F7183D408230D) == 0x0010C8, "Member 'AWillie_BP_C::Timeline_5_Step_Progress_E86A26BC4439C443728F7183D408230D' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_5__Direction_E86A26BC4439C443728F7183D408230D) == 0x0010CC, "Member 'AWillie_BP_C::Timeline_5__Direction_E86A26BC4439C443728F7183D408230D' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_5) == 0x0010D0, "Member 'AWillie_BP_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_1__Direction_89B56D0C45B5FC462868688C529B1E4F) == 0x0010D8, "Member 'AWillie_BP_C::Timeline_1__Direction_89B56D0C45B5FC462868688C529B1E4F' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_1) == 0x0010E0, "Member 'AWillie_BP_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_0__Direction_E5E389E347DEBDBF6258D3B1F9BFCF5F) == 0x0010E8, "Member 'AWillie_BP_C::Timeline_0__Direction_E5E389E347DEBDBF6258D3B1F9BFCF5F' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Timeline_0) == 0x0010F0, "Member 'AWillie_BP_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slomo_Timeline_Time_Dilation_D46B620B476457D87537CDB1216D0F9D) == 0x0010F8, "Member 'AWillie_BP_C::Slomo_Timeline_Time_Dilation_D46B620B476457D87537CDB1216D0F9D' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slomo_Timeline__Direction_D46B620B476457D87537CDB1216D0F9D) == 0x0010FC, "Member 'AWillie_BP_C::Slomo_Timeline__Direction_D46B620B476457D87537CDB1216D0F9D' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slomo_Timeline) == 0x001100, "Member 'AWillie_BP_C::Slomo_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_Timeline_Step_Progress_1B74948A437E30E8E71B8BBC9D8A9F6B) == 0x001108, "Member 'AWillie_BP_C::L_Step_Timeline_Step_Progress_1B74948A437E30E8E71B8BBC9D8A9F6B' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_Timeline__Direction_1B74948A437E30E8E71B8BBC9D8A9F6B) == 0x00110C, "Member 'AWillie_BP_C::L_Step_Timeline__Direction_1B74948A437E30E8E71B8BBC9D8A9F6B' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_Timeline) == 0x001110, "Member 'AWillie_BP_C::L_Step_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_Timeline_Step_Progress_A35F354C423026A1610E4E9E05E1309F) == 0x001118, "Member 'AWillie_BP_C::R_Step_Timeline_Step_Progress_A35F354C423026A1610E4E9E05E1309F' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_Timeline__Direction_A35F354C423026A1610E4E9E05E1309F) == 0x00111C, "Member 'AWillie_BP_C::R_Step_Timeline__Direction_A35F354C423026A1610E4E9E05E1309F' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_Timeline) == 0x001120, "Member 'AWillie_BP_C::R_Step_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Death_Timeline_NewTrack_0_75E28255457A18F7A2D1C7A5CC02480F) == 0x001128, "Member 'AWillie_BP_C::Death_Timeline_NewTrack_0_75E28255457A18F7A2D1C7A5CC02480F' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Death_Timeline__Direction_75E28255457A18F7A2D1C7A5CC02480F) == 0x00112C, "Member 'AWillie_BP_C::Death_Timeline__Direction_75E28255457A18F7A2D1C7A5CC02480F' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Death_Timeline) == 0x001130, "Member 'AWillie_BP_C::Death_Timeline' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, X) == 0x001138, "Member 'AWillie_BP_C::X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Y) == 0x001140, "Member 'AWillie_BP_C::Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Control_Rotation_Y) == 0x001148, "Member 'AWillie_BP_C::Control_Rotation_Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Guarding) == 0x001150, "Member 'AWillie_BP_C::R_Guarding' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Axis_Value_X) == 0x001158, "Member 'AWillie_BP_C::Axis_Value_X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Axis_Value_Y) == 0x001160, "Member 'AWillie_BP_C::Axis_Value_Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Guarding) == 0x001168, "Member 'AWillie_BP_C::L_Guarding' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Look_Sensiticity) == 0x001170, "Member 'AWillie_BP_C::Look_Sensiticity' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Vector) == 0x001178, "Member 'AWillie_BP_C::Aim_Vector' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Vector_Delayed) == 0x001190, "Member 'AWillie_BP_C::Aim_Vector_Delayed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Velocity) == 0x0011A8, "Member 'AWillie_BP_C::Aim_Velocity' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lean_Forward_On_Attack_Rate) == 0x0011C0, "Member 'AWillie_BP_C::Lean_Forward_On_Attack_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Swing_Speed) == 0x0011C8, "Member 'AWillie_BP_C::Aim_Swing_Speed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Aim_Rotation) == 0x0011D0, "Member 'AWillie_BP_C::R_Aim_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulders_Swing) == 0x0011E8, "Member 'AWillie_BP_C::Shoulders_Swing' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Rigid_Bones) == 0x0011F0, "Member 'AWillie_BP_C::Rigid_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Swing_Direction) == 0x001200, "Member 'AWillie_BP_C::R_Swing_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Rotation) == 0x001218, "Member 'AWillie_BP_C::Body_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Wrist_Direction) == 0x001230, "Member 'AWillie_BP_C::R_Wrist_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Rotation_Z) == 0x001238, "Member 'AWillie_BP_C::Ass_Rotation_Z' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Movement_Dislocation) == 0x001250, "Member 'AWillie_BP_C::Movement_Dislocation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_Default_Dislocation) == 0x001268, "Member 'AWillie_BP_C::R_Foot_Default_Dislocation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_Default_Dislocation) == 0x001280, "Member 'AWillie_BP_C::L_Foot_Default_Dislocation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Feet_Expected_Position) == 0x001298, "Member 'AWillie_BP_C::Feet_Expected_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Health) == 0x0012B0, "Member 'AWillie_BP_C::Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DED) == 0x0012B8, "Member 'AWillie_BP_C::DED' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fallen) == 0x0012B9, "Member 'AWillie_BP_C::Fallen' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, All_Body_Tonus) == 0x0012C0, "Member 'AWillie_BP_C::All_Body_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Torso_Bones) == 0x0012C8, "Member 'AWillie_BP_C::Upper_Torso_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lower_Torso_Bones) == 0x0012D8, "Member 'AWillie_BP_C::Lower_Torso_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Arm_Bones) == 0x0012E8, "Member 'AWillie_BP_C::R_Arm_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Leg_Bones) == 0x0012F8, "Member 'AWillie_BP_C::L_Leg_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Leg_Bones) == 0x001308, "Member 'AWillie_BP_C::R_Leg_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Neck_Bones) == 0x001318, "Member 'AWillie_BP_C::Neck_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Arm_Bones) == 0x001328, "Member 'AWillie_BP_C::L_Arm_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Bones) == 0x001338, "Member 'AWillie_BP_C::Head_Bones' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Capsule_Dislocation) == 0x001348, "Member 'AWillie_BP_C::Capsule_Dislocation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_Touch_Ground) == 0x001360, "Member 'AWillie_BP_C::R_Foot_Touch_Ground' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_Touch_Ground) == 0x001361, "Member 'AWillie_BP_C::L_Foot_Touch_Ground' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shoulders_Dislocation) == 0x001368, "Member 'AWillie_BP_C::Shoulders_Dislocation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Constraint_Rate) == 0x001380, "Member 'AWillie_BP_C::Constraint_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_GripType_Current) == 0x001388, "Member 'AWillie_BP_C::R_GripType_Current' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsConstraint_R_Hand) == 0x001390, "Member 'AWillie_BP_C::PhysicsConstraint_R_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Arm_Control_IK_Rate) == 0x001398, "Member 'AWillie_BP_C::R_Arm_Control_IK_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Look_Rotation__Read_Only_) == 0x0013A0, "Member 'AWillie_BP_C::Look_Rotation__Read_Only_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Capsule_Max_Dislocation) == 0x0013B8, "Member 'AWillie_BP_C::Capsule_Max_Dislocation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Distance_To_Ground_Right) == 0x0013C0, "Member 'AWillie_BP_C::Distance_To_Ground_Right' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Distance_To_Ground_Left) == 0x0013C4, "Member 'AWillie_BP_C::Distance_To_Ground_Left' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Walk_Speed_Rate_Run) == 0x0013C8, "Member 'AWillie_BP_C::Walk_Speed_Rate_Run' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Walk_Speed_Rate_Aim) == 0x0013CC, "Member 'AWillie_BP_C::Walk_Speed_Rate_Aim' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_Twist_R) == 0x0013D0, "Member 'AWillie_BP_C::Foot_Twist_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_Twist_L) == 0x0013D8, "Member 'AWillie_BP_C::Foot_Twist_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Body_Tonus) == 0x0013E0, "Member 'AWillie_BP_C::Upper_Body_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arm_R_Tonus) == 0x0013E8, "Member 'AWillie_BP_C::Arm_R_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arm_L_Tonus) == 0x0013F0, "Member 'AWillie_BP_C::Arm_L_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_R_Tonus) == 0x0013F8, "Member 'AWillie_BP_C::Leg_R_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_L_Tonus) == 0x001400, "Member 'AWillie_BP_C::Leg_L_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit_Force) == 0x001408, "Member 'AWillie_BP_C::Body_Hit_Force' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lower_Tilt_Right) == 0x001410, "Member 'AWillie_BP_C::Lower_Tilt_Right' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lower_Tilt_Front) == 0x001418, "Member 'AWillie_BP_C::Lower_Tilt_Front' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lower_Tilt_Upright) == 0x001420, "Member 'AWillie_BP_C::Lower_Tilt_Upright' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Tilt_Right) == 0x001428, "Member 'AWillie_BP_C::Upper_Tilt_Right' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Tilt_Front) == 0x001430, "Member 'AWillie_BP_C::Upper_Tilt_Front' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Tilt_Upright) == 0x001438, "Member 'AWillie_BP_C::Upper_Tilt_Upright' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pos_Constraint) == 0x001440, "Member 'AWillie_BP_C::Pos_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Rot_Constraint) == 0x001448, "Member 'AWillie_BP_C::Rot_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Orientation_Strength) == 0x001450, "Member 'AWillie_BP_C::Orientation_Strength' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Angular_Strength) == 0x001458, "Member 'AWillie_BP_C::Angular_Strength' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Muscle_Power) == 0x001460, "Member 'AWillie_BP_C::Muscle_Power' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_L_Arm_Alpha) == 0x001468, "Member 'AWillie_BP_C::Pain_L_Arm_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_R_Arm_Alpha) == 0x001470, "Member 'AWillie_BP_C::Pain_R_Arm_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain) == 0x001478, "Member 'AWillie_BP_C::Pain' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Elbow_R_pain) == 0x001480, "Member 'AWillie_BP_C::Elbow_R_pain' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Elbow_L_pain) == 0x001498, "Member 'AWillie_BP_C::Elbow_L_pain' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Stepping) == 0x0014B0, "Member 'AWillie_BP_C::R_Stepping' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Stepping) == 0x0014B1, "Member 'AWillie_BP_C::L_Stepping' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_Start_Position) == 0x0014B8, "Member 'AWillie_BP_C::R_Step_Start_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_End_Position) == 0x0014D0, "Member 'AWillie_BP_C::R_Step_End_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_Start_Position) == 0x0014E8, "Member 'AWillie_BP_C::L_Step_Start_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_End_Position) == 0x001500, "Member 'AWillie_BP_C::L_Step_End_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_Stepping_Enum) == 0x001518, "Member 'AWillie_BP_C::Foot_Stepping_Enum' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Step_Rate) == 0x00151C, "Member 'AWillie_BP_C::Step_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Root_Height) == 0x001520, "Member 'AWillie_BP_C::Root_Height' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Activate_Constraint) == 0x001528, "Member 'AWillie_BP_C::Activate_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Is_Crouched) == 0x001529, "Member 'AWillie_BP_C::Is_Crouched' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Crouched_Height) == 0x001530, "Member 'AWillie_BP_C::Crouched_Height' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_On_Ground_Loc) == 0x001538, "Member 'AWillie_BP_C::R_Foot_On_Ground_Loc' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_On_Ground_Loc) == 0x001550, "Member 'AWillie_BP_C::L_Foot_On_Ground_Loc' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Right_Foot_Lead) == 0x001568, "Member 'AWillie_BP_C::Right_Foot_Lead' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pelvis_Dislocaton) == 0x001570, "Member 'AWillie_BP_C::Pelvis_Dislocaton' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Rotation) == 0x001588, "Member 'AWillie_BP_C::Ass_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Consciousness) == 0x001590, "Member 'AWillie_BP_C::Consciousness' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Health) == 0x001598, "Member 'AWillie_BP_C::Head_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Upper_Health) == 0x0015A0, "Member 'AWillie_BP_C::Body_Upper_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Lower_Health) == 0x0015A8, "Member 'AWillie_BP_C::Body_Lower_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arm_R_Health) == 0x0015B0, "Member 'AWillie_BP_C::Arm_R_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arm_L_Health) == 0x0015B8, "Member 'AWillie_BP_C::Arm_L_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_R_Health) == 0x0015C0, "Member 'AWillie_BP_C::Leg_R_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_L_Health) == 0x0015C8, "Member 'AWillie_BP_C::Leg_L_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, LR_Feet_Height_Difference) == 0x0015D0, "Member 'AWillie_BP_C::LR_Feet_Height_Difference' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, RL_Feet_Height_Difference) == 0x0015D8, "Member 'AWillie_BP_C::RL_Feet_Height_Difference' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Walk_Arm_L) == 0x0015E0, "Member 'AWillie_BP_C::Walk_Arm_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Control_Rotation) == 0x0015F8, "Member 'AWillie_BP_C::AI_Control_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Y) == 0x001610, "Member 'AWillie_BP_C::R_Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_X) == 0x001618, "Member 'AWillie_BP_C::R_X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Arm_Control_IK_Rate) == 0x001620, "Member 'AWillie_BP_C::L_Arm_Control_IK_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_X) == 0x001628, "Member 'AWillie_BP_C::L_X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Y) == 0x001630, "Member 'AWillie_BP_C::L_Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Aim_Rotation) == 0x001638, "Member 'AWillie_BP_C::L_Aim_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Default_Arm_Position_R) == 0x001650, "Member 'AWillie_BP_C::Default_Arm_Position_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Default_Arm_Position_L) == 0x001668, "Member 'AWillie_BP_C::Default_Arm_Position_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Swing_Direction) == 0x001680, "Member 'AWillie_BP_C::L_Swing_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Wrist_Direction) == 0x001698, "Member 'AWillie_BP_C::L_Wrist_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_GripType_Current) == 0x0016A0, "Member 'AWillie_BP_C::L_GripType_Current' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Any_Guarding) == 0x0016A1, "Member 'AWillie_BP_C::Any_Guarding' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PhysicsConstraint_L_Hand) == 0x0016A8, "Member 'AWillie_BP_C::PhysicsConstraint_L_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Body_Part) == 0x0016B0, "Member 'AWillie_BP_C::Dismember_Body_Part' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Bleeding) == 0x0016B8, "Member 'AWillie_BP_C::Bleeding' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_R) == 0x0016C0, "Member 'AWillie_BP_C::Weapon_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Default_Transform) == 0x0016D0, "Member 'AWillie_BP_C::Default_Transform' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Thrusting) == 0x001730, "Member 'AWillie_BP_C::R_Thrusting' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Thrusting_Extend) == 0x001731, "Member 'AWillie_BP_C::R_Thrusting_Extend' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Down) == 0x001732, "Member 'AWillie_BP_C::R_Down' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Thrust_Alpha) == 0x001738, "Member 'AWillie_BP_C::R_Thrust_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Thrust_Position_Alpha) == 0x001740, "Member 'AWillie_BP_C::R_Thrust_Position_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawn_Blood_Sp_Rate) == 0x001748, "Member 'AWillie_BP_C::Spawn_Blood_Sp_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawn_Blood_Body_Part) == 0x001750, "Member 'AWillie_BP_C::Spawn_Blood_Body_Part' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Look_Z) == 0x001754, "Member 'AWillie_BP_C::Look_Z' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_L) == 0x001758, "Member 'AWillie_BP_C::Weapon_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Phys_Anim_Array) == 0x001760, "Member 'AWillie_BP_C::Phys_Anim_Array' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, First_Person) == 0x001770, "Member 'AWillie_BP_C::First_Person' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Shout_Recharge) == 0x001771, "Member 'AWillie_BP_C::Shout_Recharge' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Thrusting_End) == 0x001772, "Member 'AWillie_BP_C::R_Thrusting_End' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Times_Pressed_R) == 0x001774, "Member 'AWillie_BP_C::Times_Pressed_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Swing_Velocity_proxy) == 0x001778, "Member 'AWillie_BP_C::Swing_Velocity_proxy' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Proxy_Model_Index_Set) == 0x001780, "Member 'AWillie_BP_C::Proxy_Model_Index_Set' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Proxy_Model_Index) == 0x001784, "Member 'AWillie_BP_C::Proxy_Model_Index' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, ArmorSlots_1) == 0x001788, "Member 'AWillie_BP_C::ArmorSlots_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Proxy_Skeleton) == 0x0017D8, "Member 'AWillie_BP_C::Proxy_Skeleton' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Spawned_Blood_Rate) == 0x0017E0, "Member 'AWillie_BP_C::Last_Spawned_Blood_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawned_Blood) == 0x0017E8, "Member 'AWillie_BP_C::Spawned_Blood' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawn_Bone) == 0x0017F8, "Member 'AWillie_BP_C::Spawn_Bone' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawned_Limb) == 0x001800, "Member 'AWillie_BP_C::Spawned_Limb' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Proc_Mesh_Component_1) == 0x001808, "Member 'AWillie_BP_C::Proc_Mesh_Component_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismembered_Bone) == 0x001810, "Member 'AWillie_BP_C::Dismembered_Bone' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Proc_Mesh_Component_2) == 0x001818, "Member 'AWillie_BP_C::Proc_Mesh_Component_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Proc_Mesh_Component_3) == 0x001820, "Member 'AWillie_BP_C::Proc_Mesh_Component_3' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawned_Gore) == 0x001828, "Member 'AWillie_BP_C::Spawned_Gore' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawned_Limb_Location) == 0x001878, "Member 'AWillie_BP_C::Spawned_Limb_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawned_Limb_Rotation) == 0x001890, "Member 'AWillie_BP_C::Spawned_Limb_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismembered_Map) == 0x0018A8, "Member 'AWillie_BP_C::Dismembered_Map' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismembered_Array) == 0x0018F8, "Member 'AWillie_BP_C::Dismembered_Array' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Bone_Selection) == 0x001908, "Member 'AWillie_BP_C::Dismember_Bone_Selection' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismemberment_Avaliable) == 0x001910, "Member 'AWillie_BP_C::Dismemberment_Avaliable' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Root_Angular_Constraint_Power) == 0x001918, "Member 'AWillie_BP_C::Root_Angular_Constraint_Power' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Root_Linear_Constraint_Power) == 0x001920, "Member 'AWillie_BP_C::Root_Linear_Constraint_Power' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GetUp_Arm_R) == 0x001928, "Member 'AWillie_BP_C::GetUp_Arm_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GetUp_Arm_L) == 0x001940, "Member 'AWillie_BP_C::GetUp_Arm_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GetUp_Leg_R) == 0x001958, "Member 'AWillie_BP_C::GetUp_Leg_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GetUp_Leg_L) == 0x001970, "Member 'AWillie_BP_C::GetUp_Leg_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fallen_Rate) == 0x001988, "Member 'AWillie_BP_C::Fallen_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Body_Part_Map) == 0x001990, "Member 'AWillie_BP_C::Dismember_Body_Part_Map' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Attached_Decal_Map) == 0x0019E0, "Member 'AWillie_BP_C::Attached_Decal_Map' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Attached_Blood_Emitters) == 0x001A30, "Member 'AWillie_BP_C::Attached_Blood_Emitters' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lock_From_Dismember_Temp) == 0x001A80, "Member 'AWillie_BP_C::Lock_From_Dismember_Temp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Mute) == 0x001A90, "Member 'AWillie_BP_C::Mute' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Neck_Health) == 0x001A98, "Member 'AWillie_BP_C::Neck_Health' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawned_Gore_On_Limb) == 0x001AA0, "Member 'AWillie_BP_C::Spawned_Gore_On_Limb' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Guts) == 0x001AF0, "Member 'AWillie_BP_C::Guts' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_Dismember_Bone) == 0x001AF8, "Member 'AWillie_BP_C::Block_Dismember_Bone' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stick_X) == 0x001B08, "Member 'AWillie_BP_C::Stick_X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stick_Y) == 0x001B10, "Member 'AWillie_BP_C::Stick_Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Team_Int) == 0x001B18, "Member 'AWillie_BP_C::Team_Int' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Down) == 0x001B1C, "Member 'AWillie_BP_C::L_Down' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Times_Pressed_L) == 0x001B20, "Member 'AWillie_BP_C::Times_Pressed_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Thrusting) == 0x001B24, "Member 'AWillie_BP_C::L_Thrusting' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Thrusting_Extend) == 0x001B25, "Member 'AWillie_BP_C::L_Thrusting_Extend' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Thrusting_End) == 0x001B26, "Member 'AWillie_BP_C::L_Thrusting_End' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Thrust_Alpha) == 0x001B28, "Member 'AWillie_BP_C::L_Thrust_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Thrust_Position_Alpha) == 0x001B30, "Member 'AWillie_BP_C::L_Thrust_Position_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, GI_Settings) == 0x001B38, "Member 'AWillie_BP_C::GI_Settings' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Offhand_Searching_Grip) == 0x001B40, "Member 'AWillie_BP_C::L_Offhand_Searching_Grip' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, HS_Game_Mode) == 0x001B48, "Member 'AWillie_BP_C::HS_Game_Mode' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_In_Offhand_Attached) == 0x001B50, "Member 'AWillie_BP_C::L_Hand_In_Offhand_Attached' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Alt_Thrusting) == 0x001B51, "Member 'AWillie_BP_C::Alt_Thrusting' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, TG_R) == 0x001B58, "Member 'AWillie_BP_C::TG_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, TG_L) == 0x001B60, "Member 'AWillie_BP_C::TG_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Alt_Thrust_R) == 0x001B68, "Member 'AWillie_BP_C::Alt_Thrust_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Alt_Thrust_L) == 0x001B70, "Member 'AWillie_BP_C::Alt_Thrust_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Alt_Thrusting_Alpha) == 0x001B78, "Member 'AWillie_BP_C::Alt_Thrusting_Alpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Downed) == 0x001B80, "Member 'AWillie_BP_C::Downed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Left_Hand_Not_Found) == 0x001B81, "Member 'AWillie_BP_C::Left_Hand_Not_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dropping_R) == 0x001B82, "Member 'AWillie_BP_C::Dropping_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Player_Getting_Up_Pressed) == 0x001B83, "Member 'AWillie_BP_C::Player_Getting_Up_Pressed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Thrust_Alt_Gamepad) == 0x001B84, "Member 'AWillie_BP_C::Thrust_Alt_Gamepad' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Gurgling) == 0x001B85, "Member 'AWillie_BP_C::Gurgling' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Screaming) == 0x001B86, "Member 'AWillie_BP_C::Screaming' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Pain) == 0x001B88, "Member 'AWillie_BP_C::Last_Pain' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Material) == 0x001B90, "Member 'AWillie_BP_C::Body_Material' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Threat_Location_R) == 0x001B98, "Member 'AWillie_BP_C::Threat_Location_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Threat_Location_L) == 0x001BB0, "Member 'AWillie_BP_C::Threat_Location_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Parrying_R) == 0x001BC8, "Member 'AWillie_BP_C::Parrying_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Parrying_L) == 0x001BC9, "Member 'AWillie_BP_C::Parrying_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Parry_Rate) == 0x001BD0, "Member 'AWillie_BP_C::R_Parry_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Parry_Rate) == 0x001BD8, "Member 'AWillie_BP_C::L_Parry_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Danger_) == 0x001BE0, "Member 'AWillie_BP_C::Danger_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Offhand) == 0x001BE1, "Member 'AWillie_BP_C::R_Hand_Offhand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Offhand) == 0x001BE2, "Member 'AWillie_BP_C::L_Hand_Offhand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Offhand_Rate) == 0x001BE8, "Member 'AWillie_BP_C::R_Offhand_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Offhand_Rate) == 0x001BF0, "Member 'AWillie_BP_C::L_Offhand_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Threatening_Stance) == 0x001BF8, "Member 'AWillie_BP_C::Threatening_Stance' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Running_Speed_Rate) == 0x001C00, "Member 'AWillie_BP_C::Running_Speed_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Movement_Input_Vector) == 0x001C08, "Member 'AWillie_BP_C::Movement_Input_Vector' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Weapon_Length_Default) == 0x001C20, "Member 'AWillie_BP_C::R_Weapon_Length_Default' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Weapon_Length_To_Top) == 0x001C28, "Member 'AWillie_BP_C::L_Weapon_Length_To_Top' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Immediate_Threat) == 0x001C30, "Member 'AWillie_BP_C::AI_Immediate_Threat' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Phys_Hand_Rel_Rot_AI) == 0x001C38, "Member 'AWillie_BP_C::R_Phys_Hand_Rel_Rot_AI' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Phys_Hand_Rel_Rot_AI) == 0x001C50, "Member 'AWillie_BP_C::L_Phys_Hand_Rel_Rot_AI' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Targeted_By_AI) == 0x001C68, "Member 'AWillie_BP_C::Targeted_By_AI' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lock_Camera_At) == 0x001C78, "Member 'AWillie_BP_C::Lock_Camera_At' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lock_On_Found) == 0x001C90, "Member 'AWillie_BP_C::Lock_On_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Active_Camera) == 0x001C98, "Member 'AWillie_BP_C::Active_Camera' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Lock_On) == 0x001CA0, "Member 'AWillie_BP_C::Aim_Lock_On' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Lock_Off) == 0x001CB0, "Member 'AWillie_BP_C::Aim_Lock_Off' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_Progress) == 0x001CC0, "Member 'AWillie_BP_C::R_Step_Progress' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_Progress) == 0x001CC4, "Member 'AWillie_BP_C::L_Step_Progress' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Walk_Shoulder_Swing) == 0x001CC8, "Member 'AWillie_BP_C::Walk_Shoulder_Swing' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Walk_Arm_R) == 0x001CD0, "Member 'AWillie_BP_C::Walk_Arm_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ground_Unevenness) == 0x001CE8, "Member 'AWillie_BP_C::Ground_Unevenness' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_Dislocation_X) == 0x001CF0, "Member 'AWillie_BP_C::R_Foot_Dislocation_X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_Dislocation_X) == 0x001CF8, "Member 'AWillie_BP_C::L_Foot_Dislocation_X' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Worn_Armor) == 0x001D00, "Member 'AWillie_BP_C::Worn_Armor' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Switching_Feet_R) == 0x001D10, "Member 'AWillie_BP_C::Switching_Feet_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Switching_Feet_L) == 0x001D11, "Member 'AWillie_BP_C::Switching_Feet_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Arm_Extra_Tonus) == 0x001D18, "Member 'AWillie_BP_C::R_Arm_Extra_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Arm_Extra_Tonus) == 0x001D20, "Member 'AWillie_BP_C::L_Arm_Extra_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Shock) == 0x001D28, "Member 'AWillie_BP_C::Pain_Shock' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_GripType_Default) == 0x001D29, "Member 'AWillie_BP_C::R_GripType_Default' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Alt_Grip) == 0x001D2A, "Member 'AWillie_BP_C::R_Alt_Grip' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Two_Handed_Grip) == 0x001D2B, "Member 'AWillie_BP_C::R_Two_Handed_Grip' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Thrust_Rot_Comb) == 0x001D30, "Member 'AWillie_BP_C::R_Thrust_Rot_Comb' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Shoulder_Rotation) == 0x001D48, "Member 'AWillie_BP_C::R_Shoulder_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Elbow_Rotation) == 0x001D60, "Member 'AWillie_BP_C::R_Elbow_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Rotation) == 0x001D78, "Member 'AWillie_BP_C::R_Hand_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Elbow_Additive_Rotation) == 0x001D90, "Member 'AWillie_BP_C::R_Elbow_Additive_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Shoulder_Additive_Rotation) == 0x001DA8, "Member 'AWillie_BP_C::R_Shoulder_Additive_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Out_Joint_Pos) == 0x001DC0, "Member 'AWillie_BP_C::R_Out_Joint_Pos' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Out_End_Pos) == 0x001DD8, "Member 'AWillie_BP_C::R_Out_End_Pos' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Out_Joint_Pos) == 0x001DF0, "Member 'AWillie_BP_C::L_Out_Joint_Pos' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Out_End_Pos) == 0x001E08, "Member 'AWillie_BP_C::L_Out_End_Pos' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Shoulder_Rotation) == 0x001E20, "Member 'AWillie_BP_C::L_Shoulder_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Elbow_Rotation) == 0x001E38, "Member 'AWillie_BP_C::L_Elbow_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Rotation) == 0x001E50, "Member 'AWillie_BP_C::L_Hand_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Elbow_Additive_Rotation) == 0x001E68, "Member 'AWillie_BP_C::L_Elbow_Additive_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Shoulder_Additive_Rotation) == 0x001E80, "Member 'AWillie_BP_C::L_Shoulder_Additive_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Give_Up) == 0x001E98, "Member 'AWillie_BP_C::Give_Up' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_AI_Balance_Point__temp_) == 0x001EA0, "Member 'AWillie_BP_C::L_AI_Balance_Point__temp_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Shake) == 0x001EA8, "Member 'AWillie_BP_C::Camera_Shake' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hit_Rigidity) == 0x001EB0, "Member 'AWillie_BP_C::Hit_Rigidity' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Fisting_Rate) == 0x001EB8, "Member 'AWillie_BP_C::R_Fisting_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Fisting_Rate) == 0x001EC0, "Member 'AWillie_BP_C::L_Fisting_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lower_Threshold_Hit) == 0x001EC8, "Member 'AWillie_BP_C::Lower_Threshold_Hit' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Constraint_Rate_Proxy) == 0x001ED0, "Member 'AWillie_BP_C::Constraint_Rate_Proxy' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, On_Ground_Z_Rotation) == 0x001ED8, "Member 'AWillie_BP_C::On_Ground_Z_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, On_Ground_Turn) == 0x001EE0, "Member 'AWillie_BP_C::On_Ground_Turn' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, On_Ground_Movement_Dot) == 0x001EE8, "Member 'AWillie_BP_C::On_Ground_Movement_Dot' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hand_R_Get_Up_Found) == 0x001EF0, "Member 'AWillie_BP_C::Hand_R_Get_Up_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hand_L_Get_Up_Found) == 0x001EF1, "Member 'AWillie_BP_C::Hand_L_Get_Up_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_R_Get_Up_Found) == 0x001EF2, "Member 'AWillie_BP_C::Leg_R_Get_Up_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_L_Get_Up_Found) == 0x001EF3, "Member 'AWillie_BP_C::Leg_L_Get_Up_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Get_Up_Any_Limb_Found) == 0x001EF4, "Member 'AWillie_BP_C::Get_Up_Any_Limb_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Thrust_Rot_Comb) == 0x001EF8, "Member 'AWillie_BP_C::L_Thrust_Rot_Comb' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Invert_Value) == 0x001F10, "Member 'AWillie_BP_C::Invert_Value' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Inverted_) == 0x001F18, "Member 'AWillie_BP_C::Inverted_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Stumble_Immediate) == 0x001F20, "Member 'AWillie_BP_C::Pain_Stumble_Immediate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Stumble_Delayed) == 0x001F38, "Member 'AWillie_BP_C::Pain_Stumble_Delayed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Pain_Threshold) == 0x001F50, "Member 'AWillie_BP_C::Current_Pain_Threshold' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Bone) == 0x001F58, "Member 'AWillie_BP_C::Pain_Bone' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Grab_Rate) == 0x001F60, "Member 'AWillie_BP_C::Pain_Grab_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Camera_Locked) == 0x001F68, "Member 'AWillie_BP_C::Camera_Locked' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Target_Found) == 0x001F69, "Member 'AWillie_BP_C::Grab_R_Target_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Rate) == 0x001F70, "Member 'AWillie_BP_C::Grab_R_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lean_Forward__Grabbing_) == 0x001F78, "Member 'AWillie_BP_C::Lean_Forward__Grabbing_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_Component_R) == 0x001F80, "Member 'AWillie_BP_C::Grab_Component_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_Bone_R) == 0x001F88, "Member 'AWillie_BP_C::Grab_Bone_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grabbed_R) == 0x001F90, "Member 'AWillie_BP_C::Grabbed_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Constraint) == 0x001F98, "Member 'AWillie_BP_C::Grab_R_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_Component_L) == 0x001FA0, "Member 'AWillie_BP_C::Grab_Component_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_L_Constraint) == 0x001FA8, "Member 'AWillie_BP_C::Grab_L_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_L_Target_Found) == 0x001FB0, "Member 'AWillie_BP_C::Grab_L_Target_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_L_Rate) == 0x001FB8, "Member 'AWillie_BP_C::Grab_L_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_Bone_L) == 0x001FC0, "Member 'AWillie_BP_C::Grab_Bone_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grabbed_L) == 0x001FC8, "Member 'AWillie_BP_C::Grabbed_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Being_Grabbed) == 0x001FC9, "Member 'AWillie_BP_C::Being_Grabbed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Morph_Targets) == 0x001FD0, "Member 'AWillie_BP_C::Armor_Morph_Targets' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Grab_Force_Limit) == 0x001FE0, "Member 'AWillie_BP_C::R_Grab_Force_Limit' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Grab_Force_Limit) == 0x001FE8, "Member 'AWillie_BP_C::L_Grab_Force_Limit' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Control_Rotation) == 0x001FF0, "Member 'AWillie_BP_C::Current_Control_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Constraint_Locked) == 0x002008, "Member 'AWillie_BP_C::R_Hand_Constraint_Locked' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Constraint_Locked) == 0x002009, "Member 'AWillie_BP_C::L_Hand_Constraint_Locked' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_GripType_Default) == 0x00200A, "Member 'AWillie_BP_C::L_GripType_Default' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_R_0) == 0x002010, "Member 'AWillie_BP_C::Weapon_R_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_L_0) == 0x002018, "Member 'AWillie_BP_C::Weapon_L_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Swapping_weapons) == 0x002020, "Member 'AWillie_BP_C::Swapping_weapons' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Arm_Being_Grabbed) == 0x002021, "Member 'AWillie_BP_C::R_Arm_Being_Grabbed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Arm_Being_Grabbed) == 0x002022, "Member 'AWillie_BP_C::L_Arm_Being_Grabbed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Default_R_Arm_Position) == 0x002028, "Member 'AWillie_BP_C::Current_Default_R_Arm_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Default_L_Arm_Position) == 0x002040, "Member 'AWillie_BP_C::Current_Default_L_Arm_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dropping_L) == 0x002058, "Member 'AWillie_BP_C::Dropping_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Wrist_R_Direct_Control_Rate) == 0x002060, "Member 'AWillie_BP_C::Wrist_R_Direct_Control_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Wrist_R_Direct_Control) == 0x002068, "Member 'AWillie_BP_C::Wrist_R_Direct_Control' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Grab_Pressed) == 0x002069, "Member 'AWillie_BP_C::R_Grab_Pressed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Weapon_Sheathing) == 0x00206A, "Member 'AWillie_BP_C::R_Weapon_Sheathing' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Wrist_Direct_Rotation) == 0x002070, "Member 'AWillie_BP_C::R_Wrist_Direct_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Temp_Transform) == 0x002090, "Member 'AWillie_BP_C::Temp_Transform' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Scabbard_R_1) == 0x0020F0, "Member 'AWillie_BP_C::Scabbard_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_R_1_Constraint) == 0x0020F8, "Member 'AWillie_BP_C::Slot_R_1_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_UnSheathing_R) == 0x002100, "Member 'AWillie_BP_C::Weapon_UnSheathing_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Sheath_Margin_R) == 0x002104, "Member 'AWillie_BP_C::Sheath_Margin_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Hit_Impulse) == 0x002108, "Member 'AWillie_BP_C::Last_Hit_Impulse' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Complex_Damage_Impulse) == 0x002110, "Member 'AWillie_BP_C::Last_Complex_Damage_Impulse' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Latest_Damage_Raw) == 0x002118, "Member 'AWillie_BP_C::Latest_Damage_Raw' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Complex_Damage_Bone) == 0x002120, "Member 'AWillie_BP_C::Last_Complex_Damage_Bone' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Latest_Blood_Emitter) == 0x002128, "Member 'AWillie_BP_C::Latest_Blood_Emitter' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Manniquin_) == 0x002130, "Member 'AWillie_BP_C::Manniquin_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Free_Fall_Rate) == 0x002138, "Member 'AWillie_BP_C::Free_Fall_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Helmet_World_Mesh) == 0x002140, "Member 'AWillie_BP_C::Helmet_World_Mesh' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Kneel_Falling) == 0x002148, "Member 'AWillie_BP_C::R_Kneel_Falling' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Kneel_Falling) == 0x002149, "Member 'AWillie_BP_C::L_Kneel_Falling' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Z) == 0x002150, "Member 'AWillie_BP_C::Z' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_R_Weapon_From_Sheathing) == 0x002158, "Member 'AWillie_BP_C::Block_R_Weapon_From_Sheathing' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Sheath_Slot_Name) == 0x00215C, "Member 'AWillie_BP_C::R_Sheath_Slot_Name' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Sheathed_Weapon_R) == 0x002168, "Member 'AWillie_BP_C::Last_Sheathed_Weapon_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_R_1) == 0x002170, "Member 'AWillie_BP_C::Weapon_Slot_R_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_R_2) == 0x002178, "Member 'AWillie_BP_C::Weapon_Slot_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Scabbard_R_2) == 0x002180, "Member 'AWillie_BP_C::Scabbard_R_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_Back) == 0x002188, "Member 'AWillie_BP_C::Weapon_Slot_Back' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fear) == 0x002190, "Member 'AWillie_BP_C::Fear' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Scabbard_R) == 0x002198, "Member 'AWillie_BP_C::Current_Scabbard_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ignore_Pick_Up_Array) == 0x0021A0, "Member 'AWillie_BP_C::Ignore_Pick_Up_Array' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Sheath_Slot_R) == 0x0021B0, "Member 'AWillie_BP_C::Sheath_Slot_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_R_2_Constraint) == 0x0021B8, "Member 'AWillie_BP_C::Slot_R_2_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_Back_Constraint) == 0x0021C0, "Member 'AWillie_BP_C::Slot_Back_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Temp_Float) == 0x0021C8, "Member 'AWillie_BP_C::Temp_Float' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Grab_Pressed) == 0x0021D0, "Member 'AWillie_BP_C::L_Grab_Pressed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Weapon_Sheathing) == 0x0021D1, "Member 'AWillie_BP_C::L_Weapon_Sheathing' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Sheath_Slot_Name) == 0x0021D4, "Member 'AWillie_BP_C::L_Sheath_Slot_Name' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_L_1_Constraint) == 0x0021E0, "Member 'AWillie_BP_C::Slot_L_1_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_L_2_Constraint) == 0x0021E8, "Member 'AWillie_BP_C::Slot_L_2_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_L_1) == 0x0021F0, "Member 'AWillie_BP_C::Weapon_Slot_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_L_2) == 0x0021F8, "Member 'AWillie_BP_C::Weapon_Slot_L_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Scabbard_L_1) == 0x002200, "Member 'AWillie_BP_C::Scabbard_L_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Scabbard_L_2) == 0x002208, "Member 'AWillie_BP_C::Scabbard_L_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Scabbard_L) == 0x002210, "Member 'AWillie_BP_C::Current_Scabbard_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Sheath_Slot_L) == 0x002218, "Member 'AWillie_BP_C::Sheath_Slot_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Sheathed_Weapon_L) == 0x002220, "Member 'AWillie_BP_C::Last_Sheathed_Weapon_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Sheath_Margin_L) == 0x002228, "Member 'AWillie_BP_C::Sheath_Margin_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Wrist_L_Direct_Control) == 0x00222C, "Member 'AWillie_BP_C::Wrist_L_Direct_Control' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Wrist_Direct_Rotation) == 0x002230, "Member 'AWillie_BP_C::L_Wrist_Direct_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_L_Weapon_From_Sheathing) == 0x002248, "Member 'AWillie_BP_C::Block_L_Weapon_From_Sheathing' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_UnSheathing_L) == 0x002249, "Member 'AWillie_BP_C::Weapon_UnSheathing_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_1_Weapon_Length) == 0x002250, "Member 'AWillie_BP_C::Slot_1_Weapon_Length' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_2_Weapon_Length) == 0x002258, "Member 'AWillie_BP_C::Slot_2_Weapon_Length' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_3_Weapon_Length) == 0x002260, "Member 'AWillie_BP_C::Slot_3_Weapon_Length' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_4_Weapon_Length) == 0x002268, "Member 'AWillie_BP_C::Slot_4_Weapon_Length' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slot_5_Weapon_Length) == 0x002270, "Member 'AWillie_BP_C::Slot_5_Weapon_Length' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Found) == 0x002278, "Member 'AWillie_BP_C::Grab_R_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_L_Found) == 0x002279, "Member 'AWillie_BP_C::Grab_L_Found' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Invulnerable) == 0x00227A, "Member 'AWillie_BP_C::Invulnerable' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_P_Sound_Upper) == 0x002280, "Member 'AWillie_BP_C::Armor_P_Sound_Upper' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_P_Sound_Lower) == 0x002288, "Member 'AWillie_BP_C::Armor_P_Sound_Lower' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Start_Weapon_Right_Hand) == 0x002290, "Member 'AWillie_BP_C::Start_Weapon_Right_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Start_Weapon_Left_Hand) == 0x002298, "Member 'AWillie_BP_C::Start_Weapon_Left_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Shock_Rate) == 0x0022A0, "Member 'AWillie_BP_C::Pain_Shock_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Shock_Interp) == 0x0022A8, "Member 'AWillie_BP_C::Pain_Shock_Interp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawn_On_Ground) == 0x0022B0, "Member 'AWillie_BP_C::Spawn_On_Ground' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Initial_Wake_Up_State) == 0x0022B1, "Member 'AWillie_BP_C::Initial_Wake_Up_State' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Retreat) == 0x0022B2, "Member 'AWillie_BP_C::Retreat' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Panic_Rate) == 0x0022B8, "Member 'AWillie_BP_C::Panic_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, New_ID) == 0x0022C0, "Member 'AWillie_BP_C::New_ID' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Worn_Armor_Items) == 0x002310, "Member 'AWillie_BP_C::Worn_Armor_Items' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Slot_Materials) == 0x002320, "Member 'AWillie_BP_C::Armor_Slot_Materials' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Body_Mesh) == 0x002370, "Member 'AWillie_BP_C::Upper_Body_Mesh' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Body_Spawned) == 0x002378, "Member 'AWillie_BP_C::Upper_Body_Spawned' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Gore_Meshes) == 0x002380, "Member 'AWillie_BP_C::Gore_Meshes' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Currently_Dismembered_Mesh) == 0x0023D0, "Member 'AWillie_BP_C::Currently_Dismembered_Mesh' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Regen_Rate) == 0x0023D8, "Member 'AWillie_BP_C::Regen_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Sustained_Damage) == 0x0023E0, "Member 'AWillie_BP_C::Sustained_Damage' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Wake_Up_Rate) == 0x0023E8, "Member 'AWillie_BP_C::Wake_Up_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Music_Temp_) == 0x0023F0, "Member 'AWillie_BP_C::Music_Temp_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Grip_Alt_Toggle) == 0x0023F8, "Member 'AWillie_BP_C::R_Grip_Alt_Toggle' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Damage_Taken) == 0x002400, "Member 'AWillie_BP_C::Damage_Taken' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Bend_Down_On_Attack) == 0x002408, "Member 'AWillie_BP_C::Bend_Down_On_Attack' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Guts_Spilled) == 0x002410, "Member 'AWillie_BP_C::Guts_Spilled' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, SaveGame) == 0x002418, "Member 'AWillie_BP_C::SaveGame' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Start_Kneeled) == 0x002420, "Member 'AWillie_BP_C::Start_Kneeled' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Mouse_Sensitivity_Rate) == 0x002428, "Member 'AWillie_BP_C::Mouse_Sensitivity_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Collision_Meshes) == 0x002430, "Member 'AWillie_BP_C::Armor_Collision_Meshes' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Health__Crush_) == 0x002440, "Member 'AWillie_BP_C::Head_Health__Crush_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Being_Destroyed) == 0x002448, "Member 'AWillie_BP_C::Being_Destroyed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Right_Foot_Sound) == 0x002450, "Member 'AWillie_BP_C::Right_Foot_Sound' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Left_Foot_Sound) == 0x002458, "Member 'AWillie_BP_C::Left_Foot_Sound' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_R_1_StartUp) == 0x002460, "Member 'AWillie_BP_C::Weapon_Slot_R_1_StartUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_R_2_StartUp) == 0x002468, "Member 'AWillie_BP_C::Weapon_Slot_R_2_StartUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_Back_StartUp) == 0x002470, "Member 'AWillie_BP_C::Weapon_Slot_Back_StartUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_L_1_StartUp) == 0x002478, "Member 'AWillie_BP_C::Weapon_Slot_L_1_StartUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Slot_L_2_StartUp) == 0x002480, "Member 'AWillie_BP_C::Weapon_Slot_L_2_StartUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Damage_Rate__Additional_) == 0x002488, "Member 'AWillie_BP_C::Damage_Rate__Additional_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Limb_Damage_Rate__Additional_) == 0x002490, "Member 'AWillie_BP_C::Limb_Damage_Rate__Additional_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Health_Threshold_For_Dismemberment) == 0x002498, "Member 'AWillie_BP_C::Health_Threshold_For_Dismemberment' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, NPC_Dualist) == 0x0024A0, "Member 'AWillie_BP_C::NPC_Dualist' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fearless) == 0x0024A1, "Member 'AWillie_BP_C::Fearless' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, ArmorSlots_Premade) == 0x0024A8, "Member 'AWillie_BP_C::ArmorSlots_Premade' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Level) == 0x0024F8, "Member 'AWillie_BP_C::Level' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Woke_Up) == 0x002500, "Member 'AWillie_BP_C::Woke_Up' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dead) == 0x002510, "Member 'AWillie_BP_C::Dead' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Between_Legs) == 0x002520, "Member 'AWillie_BP_C::Weapon_Between_Legs' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Blood_Bleed_Ok) == 0x002521, "Member 'AWillie_BP_C::Blood_Bleed_Ok' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Blood_Splash_Ok) == 0x002522, "Member 'AWillie_BP_C::Blood_Splash_Ok' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Block_Drop) == 0x002523, "Member 'AWillie_BP_C::R_Hand_Block_Drop' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Block_Drop) == 0x002524, "Member 'AWillie_BP_C::L_Hand_Block_Drop' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Is_Using_Photo_Mode) == 0x002525, "Member 'AWillie_BP_C::Is_Using_Photo_Mode' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BloodyFoot_R) == 0x002528, "Member 'AWillie_BP_C::BloodyFoot_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BloodyFoot_L) == 0x00252C, "Member 'AWillie_BP_C::BloodyFoot_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BloodyFeetAlpha) == 0x002530, "Member 'AWillie_BP_C::BloodyFeetAlpha' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, BloodyFeetNoise) == 0x002538, "Member 'AWillie_BP_C::BloodyFeetNoise' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Number_of_Active_Blood_Streams) == 0x002540, "Member 'AWillie_BP_C::Number_of_Active_Blood_Streams' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Maximum_Active_Blood_Streams) == 0x002544, "Member 'AWillie_BP_C::Maximum_Active_Blood_Streams' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, LastPosition) == 0x002548, "Member 'AWillie_BP_C::LastPosition' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Max_Linear_Force) == 0x002560, "Member 'AWillie_BP_C::Max_Linear_Force' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Max_Angular_Force) == 0x002564, "Member 'AWillie_BP_C::Max_Angular_Force' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Swing_Direction) == 0x002568, "Member 'AWillie_BP_C::Swing_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Upper_Body_Lock_On_Rot_Z) == 0x002580, "Member 'AWillie_BP_C::Upper_Body_Lock_On_Rot_Z' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_Rel_Location) == 0x002588, "Member 'AWillie_BP_C::R_Foot_Rel_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_Rel_Location) == 0x0025A0, "Member 'AWillie_BP_C::L_Foot_Rel_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_Turn_R) == 0x0025B8, "Member 'AWillie_BP_C::Foot_Turn_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_Turn_L) == 0x0025C0, "Member 'AWillie_BP_C::Foot_Turn_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Toggle) == 0x0025C8, "Member 'AWillie_BP_C::L_Hand_Toggle' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Vector_0) == 0x0025D0, "Member 'AWillie_BP_C::Aim_Vector_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Lock_Rotation) == 0x0025E8, "Member 'AWillie_BP_C::Head_Lock_Rotation' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Tonus) == 0x002600, "Member 'AWillie_BP_C::Head_Tonus' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Toggle) == 0x002608, "Member 'AWillie_BP_C::R_Hand_Toggle' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hit_Component) == 0x002610, "Member 'AWillie_BP_C::Hit_Component' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Other_Actor) == 0x002618, "Member 'AWillie_BP_C::Other_Actor' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Other_Comp) == 0x002620, "Member 'AWillie_BP_C::Other_Comp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit_Normal_Impulse) == 0x002628, "Member 'AWillie_BP_C::Body_Hit_Normal_Impulse' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit) == 0x002640, "Member 'AWillie_BP_C::Body_Hit' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit_Impact_Point) == 0x002738, "Member 'AWillie_BP_C::Body_Hit_Impact_Point' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit_Normal) == 0x002750, "Member 'AWillie_BP_C::Body_Hit_Normal' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit_Bone_Name_Self) == 0x002768, "Member 'AWillie_BP_C::Body_Hit_Bone_Name_Self' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Body_Hit_Bone_Name) == 0x002770, "Member 'AWillie_BP_C::Body_Hit_Bone_Name' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Root_Height_Low_HP) == 0x002778, "Member 'AWillie_BP_C::Root_Height_Low_HP' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Aim_Velocity_0) == 0x002780, "Member 'AWillie_BP_C::Aim_Velocity_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PainFlinchDirection_Current) == 0x002798, "Member 'AWillie_BP_C::PainFlinchDirection_Current' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, PainFlinchDirection_Latest) == 0x0027B0, "Member 'AWillie_BP_C::PainFlinchDirection_Latest' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Flinch_Index) == 0x0027C8, "Member 'AWillie_BP_C::Flinch_Index' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Lower_Body) == 0x0027D0, "Member 'AWillie_BP_C::Pain_Lower_Body' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Upper_Body) == 0x0027D8, "Member 'AWillie_BP_C::Pain_Upper_Body' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Neck) == 0x0027E0, "Member 'AWillie_BP_C::Pain_Neck' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Head) == 0x0027E8, "Member 'AWillie_BP_C::Pain_Head' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Arm_R) == 0x0027F0, "Member 'AWillie_BP_C::Pain_Arm_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Arm_L) == 0x0027F8, "Member 'AWillie_BP_C::Pain_Arm_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Leg_R) == 0x002800, "Member 'AWillie_BP_C::Pain_Leg_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Leg_L) == 0x002808, "Member 'AWillie_BP_C::Pain_Leg_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Pain_Wound_Direction) == 0x002810, "Member 'AWillie_BP_C::Pain_Wound_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Pain_Body_Part) == 0x002828, "Member 'AWillie_BP_C::Current_Pain_Body_Part' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Current_Pain_Grab) == 0x002829, "Member 'AWillie_BP_C::Current_Pain_Grab' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dodge_Vector) == 0x002830, "Member 'AWillie_BP_C::Dodge_Vector' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dodging) == 0x002848, "Member 'AWillie_BP_C::Dodging' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dodge_Rate) == 0x002850, "Member 'AWillie_BP_C::Dodge_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dodge_Vector_Local) == 0x002858, "Member 'AWillie_BP_C::Dodge_Vector_Local' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Kneel) == 0x002870, "Member 'AWillie_BP_C::L_Kneel' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Kneel) == 0x002871, "Member 'AWillie_BP_C::R_Kneel' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Foot_Just_Started) == 0x002872, "Member 'AWillie_BP_C::R_Foot_Just_Started' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Foot_Just_Started) == 0x002873, "Member 'AWillie_BP_C::L_Foot_Just_Started' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Default_Pelvis_Mass) == 0x002874, "Member 'AWillie_BP_C::Default_Pelvis_Mass' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Default_Spine_05_Mass) == 0x002878, "Member 'AWillie_BP_C::Default_Spine_05_Mass' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Head_Rotation_Lerp) == 0x002880, "Member 'AWillie_BP_C::Head_Rotation_Lerp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Exhaustion) == 0x002888, "Member 'AWillie_BP_C::Exhaustion' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Skill__Temp_) == 0x002890, "Member 'AWillie_BP_C::Skill__Temp_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Left_Arm_Dominates) == 0x002898, "Member 'AWillie_BP_C::Left_Arm_Dominates' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_Location_Right) == 0x0028A0, "Member 'AWillie_BP_C::Grab_Location_Right' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_Location_Left) == 0x0028B8, "Member 'AWillie_BP_C::Grab_Location_Left' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Invincibility_Rate) == 0x0028D0, "Member 'AWillie_BP_C::AI_Invincibility_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Stuck) == 0x0028D8, "Member 'AWillie_BP_C::R_Hand_Stuck' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Stuck) == 0x0028D9, "Member 'AWillie_BP_C::L_Hand_Stuck' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Hit_Body_Component) == 0x0028E0, "Member 'AWillie_BP_C::Last_Hit_Body_Component' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slide_Body_Against_Body) == 0x0028E8, "Member 'AWillie_BP_C::Slide_Body_Against_Body' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Lawnmower_Rate) == 0x0028F0, "Member 'AWillie_BP_C::Lawnmower_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stuck_Meter_R_Hand) == 0x0028F8, "Member 'AWillie_BP_C::Stuck_Meter_R_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stuck_Meter_L_Hand) == 0x002900, "Member 'AWillie_BP_C::Stuck_Meter_L_Hand' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Debug_Global_Time) == 0x002908, "Member 'AWillie_BP_C::Debug_Global_Time' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Stuck_Under_L_Armpit) == 0x002910, "Member 'AWillie_BP_C::R_Hand_Stuck_Under_L_Armpit' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Sheath_Stuck_Between_Legs) == 0x002911, "Member 'AWillie_BP_C::Sheath_Stuck_Between_Legs' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Stuck_Shoulder) == 0x002912, "Member 'AWillie_BP_C::R_Hand_Stuck_Shoulder' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Bones_Weights_Floats) == 0x002918, "Member 'AWillie_BP_C::Armor_Bones_Weights_Floats' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Bones_Weights_Colliders) == 0x002968, "Member 'AWillie_BP_C::Armor_Bones_Weights_Colliders' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Weight_Head) == 0x0029B8, "Member 'AWillie_BP_C::Armor_Weight_Head' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Weight_Body) == 0x0029C0, "Member 'AWillie_BP_C::Armor_Weight_Body' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Weight_Arm_R) == 0x0029C8, "Member 'AWillie_BP_C::Armor_Weight_Arm_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Weight_Arm_L) == 0x0029D0, "Member 'AWillie_BP_C::Armor_Weight_Arm_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_Weight_Legs) == 0x0029D8, "Member 'AWillie_BP_C::Armor_Weight_Legs' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina) == 0x0029E0, "Member 'AWillie_BP_C::Stamina' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina_Burn) == 0x0029E8, "Member 'AWillie_BP_C::Stamina_Burn' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina_Burn_Swing_R) == 0x0029F0, "Member 'AWillie_BP_C::Stamina_Burn_Swing_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina_Burn_Swing_L) == 0x0029F8, "Member 'AWillie_BP_C::Stamina_Burn_Swing_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina_Burn_Thrust_R) == 0x002A00, "Member 'AWillie_BP_C::Stamina_Burn_Thrust_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina_Burn_Thrust_L) == 0x002A08, "Member 'AWillie_BP_C::Stamina_Burn_Thrust_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stamina_Burn_Dodge) == 0x002A10, "Member 'AWillie_BP_C::Stamina_Burn_Dodge' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_L_Hand_Location) == 0x002A18, "Member 'AWillie_BP_C::IK_L_Hand_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Stuck_Collision_Times) == 0x002A30, "Member 'AWillie_BP_C::Weapon_Stuck_Collision_Times' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Grip_Slide) == 0x002A34, "Member 'AWillie_BP_C::R_Hand_Grip_Slide' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Grip_Slide) == 0x002A35, "Member 'AWillie_BP_C::L_Hand_Grip_Slide' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Offhand_Searching_Grip) == 0x002A36, "Member 'AWillie_BP_C::R_Offhand_Searching_Grip' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Weapon_Attached) == 0x002A37, "Member 'AWillie_BP_C::R_Hand_Weapon_Attached' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, IK_R_Hand_Location) == 0x002A38, "Member 'AWillie_BP_C::IK_R_Hand_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Get_Up_Rate) == 0x002A50, "Member 'AWillie_BP_C::Get_Up_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Headless) == 0x002A58, "Member 'AWillie_BP_C::Headless' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Crawl_Rate) == 0x002A60, "Member 'AWillie_BP_C::Crawl_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Bone_Constraints_Ded) == 0x002A68, "Member 'AWillie_BP_C::Bone_Constraints_Ded' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Bone_Constraints_Current) == 0x002AB8, "Member 'AWillie_BP_C::Bone_Constraints_Current' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Armor_Invincibility_Rate) == 0x002B08, "Member 'AWillie_BP_C::AI_Armor_Invincibility_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Hit_Impulse__Feet_) == 0x002B10, "Member 'AWillie_BP_C::Last_Hit_Impulse__Feet_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Hit_Impulse__Other_Body_) == 0x002B18, "Member 'AWillie_BP_C::Last_Hit_Impulse__Other_Body_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dodge_Vector_Proxy) == 0x002B20, "Member 'AWillie_BP_C::Dodge_Vector_Proxy' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_M_Sound_Upper) == 0x002B38, "Member 'AWillie_BP_C::Armor_M_Sound_Upper' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Armor_M_Sound_Lower) == 0x002B40, "Member 'AWillie_BP_C::Armor_M_Sound_Lower' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Delta_Milliseconds) == 0x002B48, "Member 'AWillie_BP_C::Delta_Milliseconds' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ground_Unevenness_R) == 0x002B50, "Member 'AWillie_BP_C::Ground_Unevenness_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ground_Unevenness_L) == 0x002B58, "Member 'AWillie_BP_C::Ground_Unevenness_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Blocking_Hit) == 0x002B60, "Member 'AWillie_BP_C::Blocking_Hit' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Blocking_Hit_0) == 0x002B61, "Member 'AWillie_BP_C::Blocking_Hit_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Threat_Location) == 0x002B68, "Member 'AWillie_BP_C::Threat_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Stamina_Burn_Rate) == 0x002B80, "Member 'AWillie_BP_C::R_Hand_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, TwoH_Alt_Stamina_Burn_Rate) == 0x002B88, "Member 'AWillie_BP_C::TwoH_Alt_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, TwoH_Default_Stamina_Burn_Rate) == 0x002B90, "Member 'AWillie_BP_C::TwoH_Default_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Stamina_Burn_Rate) == 0x002B98, "Member 'AWillie_BP_C::L_Hand_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_GripType_Alternative) == 0x002BA0, "Member 'AWillie_BP_C::R_GripType_Alternative' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Weapon_Mass) == 0x002BA4, "Member 'AWillie_BP_C::R_Weapon_Mass' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Weapon_Mass) == 0x002BA8, "Member 'AWillie_BP_C::L_Weapon_Mass' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_On_Ground_Position) == 0x002BB0, "Member 'AWillie_BP_C::Last_On_Ground_Position' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Player) == 0x002BC8, "Member 'AWillie_BP_C::Player' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Stunned) == 0x002BC9, "Member 'AWillie_BP_C::AI_Stunned' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Weapon_Length_2H) == 0x002BD0, "Member 'AWillie_BP_C::R_Weapon_Length_2H' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Weapon_Length_Alt) == 0x002BD8, "Member 'AWillie_BP_C::R_Weapon_Length_Alt' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Invincibility_Weapon_R) == 0x002BE0, "Member 'AWillie_BP_C::AI_Invincibility_Weapon_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, AI_Invincibility_Weapon_L) == 0x002BE8, "Member 'AWillie_BP_C::AI_Invincibility_Weapon_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hands_Rigidity__Gauntlets_) == 0x002BF0, "Member 'AWillie_BP_C::Hands_Rigidity__Gauntlets_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Consciousness_Cap) == 0x002BF8, "Member 'AWillie_BP_C::Consciousness_Cap' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_L_OffHand_Grab) == 0x002C00, "Member 'AWillie_BP_C::Block_L_OffHand_Grab' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Tick_Enabled) == 0x002C01, "Member 'AWillie_BP_C::Tick_Enabled' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, DressUp) == 0x002C02, "Member 'AWillie_BP_C::DressUp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Load_Equipment) == 0x002C08, "Member 'AWillie_BP_C::Load_Equipment' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, SG_Equipment) == 0x0034A8, "Member 'AWillie_BP_C::SG_Equipment' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Distance_Between_Hands_2H) == 0x0034B0, "Member 'AWillie_BP_C::Distance_Between_Hands_2H' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Talking) == 0x0034B8, "Member 'AWillie_BP_C::Talking' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, VO_Key_Pressed) == 0x0034B9, "Member 'AWillie_BP_C::VO_Key_Pressed' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Give_Up_2__Temp_) == 0x0034BA, "Member 'AWillie_BP_C::Give_Up_2__Temp_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Break_L_Constraint_Pending) == 0x0034BB, "Member 'AWillie_BP_C::Break_L_Constraint_Pending' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Enum_VoiceType) == 0x0034BC, "Member 'AWillie_BP_C::Enum_VoiceType' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Volume_Screaming) == 0x0034C0, "Member 'AWillie_BP_C::Volume_Screaming' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Volume_Gurgling) == 0x0034C8, "Member 'AWillie_BP_C::Volume_Gurgling' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Voice_Pain) == 0x0034D0, "Member 'AWillie_BP_C::Voice_Pain' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Helmet_Strap_Power) == 0x0034D8, "Member 'AWillie_BP_C::Helmet_Strap_Power' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Get_Up_Rate_Interp) == 0x0034E0, "Member 'AWillie_BP_C::Get_Up_Rate_Interp' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Getup_Animation_State) == 0x0034E8, "Member 'AWillie_BP_C::Getup_Animation_State' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, TwoH_Switched_Hands__Temp_) == 0x0034F0, "Member 'AWillie_BP_C::TwoH_Switched_Hands__Temp_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Constraint_Force_Check) == 0x0034F8, "Member 'AWillie_BP_C::R_Constraint_Force_Check' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Constraint_Force_Check) == 0x003500, "Member 'AWillie_BP_C::L_Constraint_Force_Check' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_Offhand_Attach) == 0x003508, "Member 'AWillie_BP_C::Block_Offhand_Attach' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Stuck_Counter_2H) == 0x00350C, "Member 'AWillie_BP_C::Weapon_Stuck_Counter_2H' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Stuck_Counter_2H_2) == 0x003510, "Member 'AWillie_BP_C::Weapon_Stuck_Counter_2H_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_R_Weapon) == 0x003518, "Member 'AWillie_BP_C::Foot_R_Weapon' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_R_Weapon_Constraint) == 0x003520, "Member 'AWillie_BP_C::Foot_R_Weapon_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kicking__R) == 0x003528, "Member 'AWillie_BP_C::Kicking__R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_Rate_R) == 0x00352C, "Member 'AWillie_BP_C::Kick_Rate_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kicking__L) == 0x003530, "Member 'AWillie_BP_C::Kicking__L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_Rate_L) == 0x003534, "Member 'AWillie_BP_C::Kick_Rate_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_L_Weapon) == 0x003538, "Member 'AWillie_BP_C::Foot_L_Weapon' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Blunt_Hit_Sound_Volume) == 0x003540, "Member 'AWillie_BP_C::Last_Blunt_Hit_Sound_Volume' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Sharp_Hit_Sound_Volume) == 0x003548, "Member 'AWillie_BP_C::Last_Sharp_Hit_Sound_Volume' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Bone_Hit_Sound) == 0x003550, "Member 'AWillie_BP_C::Last_Bone_Hit_Sound' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Arm_Stuck_behind_Back_Counter) == 0x003558, "Member 'AWillie_BP_C::R_Arm_Stuck_behind_Back_Counter' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Arm_Stuck_behind_Back_Counter) == 0x00355C, "Member 'AWillie_BP_C::L_Arm_Stuck_behind_Back_Counter' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Soff_Attach_Distance) == 0x003560, "Member 'AWillie_BP_C::L_Hand_Soff_Attach_Distance' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Attach_Point) == 0x003568, "Member 'AWillie_BP_C::L_Hand_Attach_Point' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Soft_Attach_Dot) == 0x003570, "Member 'AWillie_BP_C::L_Hand_Soft_Attach_Dot' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Soft_Attach_Distance) == 0x003578, "Member 'AWillie_BP_C::R_Hand_Soft_Attach_Distance' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Haand_Attach_Point) == 0x003580, "Member 'AWillie_BP_C::R_Haand_Attach_Point' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Hand_Soft_Not_Attached) == 0x003588, "Member 'AWillie_BP_C::R_Hand_Soft_Not_Attached' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Damage_Taken) == 0x003590, "Member 'AWillie_BP_C::Last_Damage_Taken' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Damaged_Bone) == 0x003598, "Member 'AWillie_BP_C::Last_Damaged_Bone' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Soft_Not_Attached) == 0x0035A0, "Member 'AWillie_BP_C::L_Hand_Soft_Not_Attached' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Hand_Soft_Not_Rotated) == 0x0035A1, "Member 'AWillie_BP_C::L_Hand_Soft_Not_Rotated' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hands_Switching__2H_) == 0x0035A2, "Member 'AWillie_BP_C::Hands_Switching__2H_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_L_Weapon_Constraint) == 0x0035A8, "Member 'AWillie_BP_C::Foot_L_Weapon_Constraint' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Player_Index) == 0x0035B0, "Member 'AWillie_BP_C::Player_Index' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Crouch_Key_Holding) == 0x0035B4, "Member 'AWillie_BP_C::Crouch_Key_Holding' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Kick_Cooldown) == 0x0035B5, "Member 'AWillie_BP_C::Kick_Cooldown' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Versus__Temp_) == 0x0035B6, "Member 'AWillie_BP_C::Versus__Temp_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Head) == 0x0035B8, "Member 'AWillie_BP_C::Array_VP_Bones_Head' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Neck) == 0x0035C8, "Member 'AWillie_BP_C::Array_VP_Bones_Neck' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Upper_Body) == 0x0035D8, "Member 'AWillie_BP_C::Array_VP_Bones_Upper_Body' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Lower_Body) == 0x0035E8, "Member 'AWillie_BP_C::Array_VP_Bones_Lower_Body' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Arm_R) == 0x0035F8, "Member 'AWillie_BP_C::Array_VP_Bones_Arm_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Arm_L) == 0x003608, "Member 'AWillie_BP_C::Array_VP_Bones_Arm_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Leg_R) == 0x003618, "Member 'AWillie_BP_C::Array_VP_Bones_Leg_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Leg_L) == 0x003628, "Member 'AWillie_BP_C::Array_VP_Bones_Leg_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Last_Hit_Body_Part) == 0x003638, "Member 'AWillie_BP_C::Last_Hit_Body_Part' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_touching_ground) == 0x003639, "Member 'AWillie_BP_C::Ass_touching_ground' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dism_VP_Collision_Box_1) == 0x003640, "Member 'AWillie_BP_C::Dism_VP_Collision_Box_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dism_VP_Collision_Box_2) == 0x003648, "Member 'AWillie_BP_C::Dism_VP_Collision_Box_2' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Step_Height) == 0x003650, "Member 'AWillie_BP_C::R_Step_Height' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Step_Height) == 0x003658, "Member 'AWillie_BP_C::L_Step_Height' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hand_L_Twist_Dot) == 0x003660, "Member 'AWillie_BP_C::Hand_L_Twist_Dot' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Elbow_L_Twist_Dot) == 0x003668, "Member 'AWillie_BP_C::Elbow_L_Twist_Dot' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hand_R_Twist_Dot) == 0x003670, "Member 'AWillie_BP_C::Hand_R_Twist_Dot' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Elbow_R_Twist_Dot) == 0x003678, "Member 'AWillie_BP_C::Elbow_R_Twist_Dot' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Swing_Direction_SlowDown__Inertia_) == 0x003680, "Member 'AWillie_BP_C::Swing_Direction_SlowDown__Inertia_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawn_Weapon_Trail_Blood_Block) == 0x003688, "Member 'AWillie_BP_C::Spawn_Weapon_Trail_Blood_Block' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Spawn_On_Death_Blood_Emitter) == 0x003689, "Member 'AWillie_BP_C::Spawn_On_Death_Blood_Emitter' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Running_Blood_Array) == 0x003690, "Member 'AWillie_BP_C::Running_Blood_Array' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Touches_Ground_Location) == 0x0036A0, "Member 'AWillie_BP_C::Ass_Touches_Ground_Location' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismembered_Limb) == 0x0036B8, "Member 'AWillie_BP_C::Dismembered_Limb' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Upper_Body_0) == 0x0036C0, "Member 'AWillie_BP_C::Array_VP_Bones_Upper_Body_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Array_VP_Bones_Upper_Body_1) == 0x0036D0, "Member 'AWillie_BP_C::Array_VP_Bones_Upper_Body_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Child_Parts) == 0x0036E0, "Member 'AWillie_BP_C::Dismember_Child_Parts' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Parent_Parts) == 0x0036F0, "Member 'AWillie_BP_C::Dismember_Parent_Parts' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Release_Rate) == 0x003700, "Member 'AWillie_BP_C::Grab_R_Release_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_L_Release_Rate) == 0x003708, "Member 'AWillie_BP_C::Grab_L_Release_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Hat_Not_Removable) == 0x003710, "Member 'AWillie_BP_C::Hat_Not_Removable' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismembered_Parts_Map) == 0x003718, "Member 'AWillie_BP_C::Dismembered_Parts_Map' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Currently_VP_Painted_Dismembered_Mesh) == 0x003768, "Member 'AWillie_BP_C::Currently_VP_Painted_Dismembered_Mesh' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Parent_Parts_0) == 0x0037B8, "Member 'AWillie_BP_C::Dismember_Parent_Parts_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Child_Parts_0) == 0x003808, "Member 'AWillie_BP_C::Dismember_Child_Parts_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dismember_Parent_Parts_1) == 0x003858, "Member 'AWillie_BP_C::Dismember_Parent_Parts_1' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Blood_Rate) == 0x0038A8, "Member 'AWillie_BP_C::Blood_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Gore_Rate) == 0x0038B0, "Member 'AWillie_BP_C::Gore_Rate' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_Dismember_Part_Armor) == 0x0038B8, "Member 'AWillie_BP_C::Block_Dismember_Part_Armor' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_Grab_R) == 0x003908, "Member 'AWillie_BP_C::Block_Grab_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Block_Grab_L) == 0x003909, "Member 'AWillie_BP_C::Block_Grab_L' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Give_Up_Weapon_To_Throat_Int) == 0x00390C, "Member 'AWillie_BP_C::Give_Up_Weapon_To_Throat_Int' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Begin) == 0x003910, "Member 'AWillie_BP_C::Grab_R_Begin' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_L_Begin) == 0x003911, "Member 'AWillie_BP_C::Grab_L_Begin' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Step_Height) == 0x003918, "Member 'AWillie_BP_C::Step_Height' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, R_Sheath_Slot_Concrete) == 0x003920, "Member 'AWillie_BP_C::R_Sheath_Slot_Concrete' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, L_Sheath_Slot_Concrete) == 0x003921, "Member 'AWillie_BP_C::L_Sheath_Slot_Concrete' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Grab_R_Unsheath) == 0x003922, "Member 'AWillie_BP_C::Grab_R_Unsheath' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_R_Hitting_Component) == 0x003928, "Member 'AWillie_BP_C::Foot_R_Hitting_Component' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Foot_L_Hitting_Component) == 0x003930, "Member 'AWillie_BP_C::Foot_L_Hitting_Component' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Weapon_Stuck_Float) == 0x003938, "Member 'AWillie_BP_C::Weapon_Stuck_Float' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Consciousness_2__Legs_) == 0x003940, "Member 'AWillie_BP_C::Consciousness_2__Legs_' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arm_R_Broken) == 0x003948, "Member 'AWillie_BP_C::Arm_R_Broken' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arm_L_Broken) == 0x003949, "Member 'AWillie_BP_C::Arm_L_Broken' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_R_Broken) == 0x00394A, "Member 'AWillie_BP_C::Leg_R_Broken' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Leg_L_Broken) == 0x00394B, "Member 'AWillie_BP_C::Leg_L_Broken' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Neck_Snapped) == 0x00394C, "Member 'AWillie_BP_C::Neck_Snapped' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Wearing_Shoes) == 0x00394D, "Member 'AWillie_BP_C::Wearing_Shoes' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Stumble_Direction) == 0x003950, "Member 'AWillie_BP_C::Stumble_Direction' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Arrow_Time) == 0x003968, "Member 'AWillie_BP_C::Arrow_Time' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Scale_Mutation_Inhibitor) == 0x003970, "Member 'AWillie_BP_C::Scale_Mutation_Inhibitor' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, SG_Gauntlet_Progress) == 0x003978, "Member 'AWillie_BP_C::SG_Gauntlet_Progress' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, ArmorSlots) == 0x003980, "Member 'AWillie_BP_C::ArmorSlots' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Use_External_Armor_Slots) == 0x0039D0, "Member 'AWillie_BP_C::Use_External_Armor_Slots' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Faction_Buff_Int) == 0x0039D4, "Member 'AWillie_BP_C::Faction_Buff_Int' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Fast_Spawn) == 0x0039D8, "Member 'AWillie_BP_C::Fast_Spawn' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Slomo_Active) == 0x0039D9, "Member 'AWillie_BP_C::Slomo_Active' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Dropping_Armors_Array) == 0x0039E0, "Member 'AWillie_BP_C::Dropping_Armors_Array' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Currently_Dropped_Armor) == 0x0039F0, "Member 'AWillie_BP_C::Currently_Dropped_Armor' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, NewVar) == 0x0039F8, "Member 'AWillie_BP_C::NewVar' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, NewVar_0) == 0x003A00, "Member 'AWillie_BP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Ass_Rotation_Thrust) == 0x003A08, "Member 'AWillie_BP_C::Ass_Rotation_Thrust' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Unsheath_in_Progress) == 0x003A10, "Member 'AWillie_BP_C::Unsheath_in_Progress' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Quick_Unsheath) == 0x003A11, "Member 'AWillie_BP_C::Quick_Unsheath' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Cheat_K) == 0x003A12, "Member 'AWillie_BP_C::Cheat_K' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Cheat_Y) == 0x003A13, "Member 'AWillie_BP_C::Cheat_Y' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Just_Thrusted_R) == 0x003A14, "Member 'AWillie_BP_C::Just_Thrusted_R' has a wrong offset!");
static_assert(offsetof(AWillie_BP_C, Just_Thrusted_L) == 0x003A15, "Member 'AWillie_BP_C::Just_Thrusted_L' has a wrong offset!");

}

